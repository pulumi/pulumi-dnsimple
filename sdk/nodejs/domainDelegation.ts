// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dnsimple from "@pulumi/dnsimple";
 *
 * // Create a domain delegation
 * const foobar = new dnsimple.DomainDelegation("foobar", {
 *     domain: dnsimple.domain,
 *     nameServers: [
 *         "ns1.example.org",
 *         "ns2.example.com",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * DNSimple domain delegations can be imported using the domain name.
 *
 * **Importing domain delegation for example.com**
 *
 * bash
 *
 * ```sh
 * $ pulumi import dnsimple:index/domainDelegation:DomainDelegation resource_name example.com
 * ```
 */
export class DomainDelegation extends pulumi.CustomResource {
    /**
     * Get an existing DomainDelegation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DomainDelegationState, opts?: pulumi.CustomResourceOptions): DomainDelegation {
        return new DomainDelegation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dnsimple:index/domainDelegation:DomainDelegation';

    /**
     * Returns true if the given object is an instance of DomainDelegation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DomainDelegation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DomainDelegation.__pulumiType;
    }

    /**
     * The domain name.
     */
    public readonly domain!: pulumi.Output<string>;
    /**
     * The list of name servers to delegate to.
     *
     * # Attributes Reference
     */
    public readonly nameServers!: pulumi.Output<string[]>;

    /**
     * Create a DomainDelegation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DomainDelegationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DomainDelegationArgs | DomainDelegationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DomainDelegationState | undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["nameServers"] = state ? state.nameServers : undefined;
        } else {
            const args = argsOrState as DomainDelegationArgs | undefined;
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if ((!args || args.nameServers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nameServers'");
            }
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["nameServers"] = args ? args.nameServers : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DomainDelegation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DomainDelegation resources.
 */
export interface DomainDelegationState {
    /**
     * The domain name.
     */
    domain?: pulumi.Input<string>;
    /**
     * The list of name servers to delegate to.
     *
     * # Attributes Reference
     */
    nameServers?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a DomainDelegation resource.
 */
export interface DomainDelegationArgs {
    /**
     * The domain name.
     */
    domain: pulumi.Input<string>;
    /**
     * The list of name servers to delegate to.
     *
     * # Attributes Reference
     */
    nameServers: pulumi.Input<pulumi.Input<string>[]>;
}
