// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a DNSimple zone resource.
 *
 * > Currently the resource creation acts as an import, so the zone must already exist in DNSimple. The only attribute that will be modified during resource creation is the `active` state of the zone. This is because our API does not allow for the creation of zones. Creation of zones happens through the purchase or creation of domains. We expect this behavior to change in the future.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dnsimple from "@pulumi/dnsimple";
 *
 * // Create a zone
 * const foobar = new dnsimple.Zone("foobar", {name: dnsimple.zone});
 * ```
 *
 * ## Import
 *
 * DNSimple zones can be imported using their numeric record ID or the zone name.
 *
 * bash
 *
 * ```sh
 * $ pulumi import dnsimple:index/zone:Zone resource_name foo.com
 * ```
 *
 * The zone ID can be found within [DNSimple Zones API](https://developer.dnsimple.com/v2/zones/#getZone). Check out [Authentication](https://developer.dnsimple.com/v2/#authentication) in API Overview for available options.
 *
 * bash
 *
 * curl -H 'Authorization: Bearer <ACCESS_TOKEN>' https://api.dnsimple.com/v2/1234/zones/example.com | jq
 *
 * {
 *
 *   "data": {
 *
 *     "id": 1,
 *     
 *     "account_id": 1234,
 *     
 *     "name": "example.com",
 *     
 *     "reverse": false,
 *     
 *     "secondary": false,
 *     
 *     "last_transferred_at": null,
 *     
 *     "active": true,
 *     
 *     "created_at": "2023-04-18T04:58:01Z",
 *     
 *     "updated_at": "2024-01-16T15:53:18Z"
 *
 *   }
 *
 * }
 */
export class Zone extends pulumi.CustomResource {
    /**
     * Get an existing Zone resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZoneState, opts?: pulumi.CustomResourceOptions): Zone {
        return new Zone(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dnsimple:index/zone:Zone';

    /**
     * Returns true if the given object is an instance of Zone.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Zone {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Zone.__pulumiType;
    }

    /**
     * The account ID for the zone.
     */
    public /*out*/ readonly accountId!: pulumi.Output<number>;
    /**
     * Whether the zone is active.
     */
    public readonly active!: pulumi.Output<boolean>;
    /**
     * The last time the zone was transferred only applicable for **secondary** zones.
     */
    public /*out*/ readonly lastTransferredAt!: pulumi.Output<string>;
    /**
     * The zone name
     *
     * # Attributes Reference
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Whether the zone is a reverse zone.
     */
    public /*out*/ readonly reverse!: pulumi.Output<boolean>;
    /**
     * Whether the zone is a secondary zone.
     */
    public /*out*/ readonly secondary!: pulumi.Output<boolean>;

    /**
     * Create a Zone resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ZoneArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ZoneArgs | ZoneState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ZoneState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["active"] = state ? state.active : undefined;
            resourceInputs["lastTransferredAt"] = state ? state.lastTransferredAt : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["reverse"] = state ? state.reverse : undefined;
            resourceInputs["secondary"] = state ? state.secondary : undefined;
        } else {
            const args = argsOrState as ZoneArgs | undefined;
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["active"] = args ? args.active : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["accountId"] = undefined /*out*/;
            resourceInputs["lastTransferredAt"] = undefined /*out*/;
            resourceInputs["reverse"] = undefined /*out*/;
            resourceInputs["secondary"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Zone.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Zone resources.
 */
export interface ZoneState {
    /**
     * The account ID for the zone.
     */
    accountId?: pulumi.Input<number>;
    /**
     * Whether the zone is active.
     */
    active?: pulumi.Input<boolean>;
    /**
     * The last time the zone was transferred only applicable for **secondary** zones.
     */
    lastTransferredAt?: pulumi.Input<string>;
    /**
     * The zone name
     *
     * # Attributes Reference
     */
    name?: pulumi.Input<string>;
    /**
     * Whether the zone is a reverse zone.
     */
    reverse?: pulumi.Input<boolean>;
    /**
     * Whether the zone is a secondary zone.
     */
    secondary?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Zone resource.
 */
export interface ZoneArgs {
    /**
     * Whether the zone is active.
     */
    active?: pulumi.Input<boolean>;
    /**
     * The zone name
     *
     * # Attributes Reference
     */
    name: pulumi.Input<string>;
}
