// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a DNSimple domain delegation signer record resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dnsimple from "@pulumi/dnsimple";
 *
 * const foobar = new dnsimple.DsRecord("foobar", {
 *     domain: dnsimple.domain,
 *     algorithm: "8",
 *     digest: "6CEEA0117A02480216EBF745A7B690F938860074E4AD11AF2AC573007205682B",
 *     digestType: "2",
 *     keyTag: "12345",
 * });
 * ```
 *
 * ## Import
 *
 * DNSimple DS record resources can be imported using their domain ID and numeric record ID.
 *
 * bash
 *
 * ```sh
 * $ pulumi import dnsimple:index/dsRecord:DsRecord resource_name example.com_5678
 * ```
 *
 * The record ID can be found within [DNSimple DNSSEC API](https://developer.dnsimple.com/v2/domains/dnssec/#listDomainDelegationSignerRecords). Check out [Authentication](https://developer.dnsimple.com/v2/#authentication) in API Overview for available options.
 *
 * bash
 *
 * curl -u 'EMAIL:PASSWORD' https://api.dnsimple.com/v2/1010/domains/example.com/ds_records | jq
 *
 * {
 *
 *   "data": [
 *
 *     {
 *     
 *       "id": 24,
 *     
 *       "domain_id": 1010,
 *     
 *       "algorithm": "8",
 *     
 *       "digest": "C1F6E04A5A61FBF65BF9DC8294C363CF11C89E802D926BDAB79C55D27BEFA94F",
 *     
 *       "digest_type": "2",
 *     
 *       "keytag": "44620",
 *     
 *       "public_key": null,
 *     
 *       "created_at": "2017-03-03T13:49:58Z",
 *     
 *       "updated_at": "2017-03-03T13:49:58Z"
 *     
 *     }
 *
 *   ],
 *
 *   "pagination": {
 *
 *     "current_page": 1,
 *     
 *     "per_page": 30,
 *     
 *     "total_entries": 1,
 *     
 *     "total_pages": 1
 *
 *   }
 *
 * }
 */
export class DsRecord extends pulumi.CustomResource {
    /**
     * Get an existing DsRecord resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DsRecordState, opts?: pulumi.CustomResourceOptions): DsRecord {
        return new DsRecord(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dnsimple:index/dsRecord:DsRecord';

    /**
     * Returns true if the given object is an instance of DsRecord.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DsRecord {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DsRecord.__pulumiType;
    }

    /**
     * DNSSEC algorithm number as a string.
     */
    public readonly algorithm!: pulumi.Output<string>;
    /**
     * The time the DS record was created at.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The hexidecimal representation of the digest of the corresponding DNSKEY record.
     */
    public readonly digest!: pulumi.Output<string | undefined>;
    /**
     * DNSSEC digest type number as a string.
     */
    public readonly digestType!: pulumi.Output<string | undefined>;
    /**
     * The domain name or numeric ID to create the delegation signer record for.
     */
    public readonly domain!: pulumi.Output<string>;
    /**
     * A keytag that references the corresponding DNSKEY record.
     */
    public readonly keytag!: pulumi.Output<string | undefined>;
    /**
     * A public key that references the corresponding DNSKEY record.
     *
     * # Attributes Reference
     */
    public readonly publicKey!: pulumi.Output<string | undefined>;
    /**
     * The time the DS record was last updated at.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a DsRecord resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DsRecordArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DsRecordArgs | DsRecordState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DsRecordState | undefined;
            resourceInputs["algorithm"] = state ? state.algorithm : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["digest"] = state ? state.digest : undefined;
            resourceInputs["digestType"] = state ? state.digestType : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["keytag"] = state ? state.keytag : undefined;
            resourceInputs["publicKey"] = state ? state.publicKey : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as DsRecordArgs | undefined;
            if ((!args || args.algorithm === undefined) && !opts.urn) {
                throw new Error("Missing required property 'algorithm'");
            }
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            resourceInputs["algorithm"] = args ? args.algorithm : undefined;
            resourceInputs["digest"] = args ? args.digest : undefined;
            resourceInputs["digestType"] = args ? args.digestType : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["keytag"] = args ? args.keytag : undefined;
            resourceInputs["publicKey"] = args ? args.publicKey : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DsRecord.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DsRecord resources.
 */
export interface DsRecordState {
    /**
     * DNSSEC algorithm number as a string.
     */
    algorithm?: pulumi.Input<string>;
    /**
     * The time the DS record was created at.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The hexidecimal representation of the digest of the corresponding DNSKEY record.
     */
    digest?: pulumi.Input<string>;
    /**
     * DNSSEC digest type number as a string.
     */
    digestType?: pulumi.Input<string>;
    /**
     * The domain name or numeric ID to create the delegation signer record for.
     */
    domain?: pulumi.Input<string>;
    /**
     * A keytag that references the corresponding DNSKEY record.
     */
    keytag?: pulumi.Input<string>;
    /**
     * A public key that references the corresponding DNSKEY record.
     *
     * # Attributes Reference
     */
    publicKey?: pulumi.Input<string>;
    /**
     * The time the DS record was last updated at.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DsRecord resource.
 */
export interface DsRecordArgs {
    /**
     * DNSSEC algorithm number as a string.
     */
    algorithm: pulumi.Input<string>;
    /**
     * The hexidecimal representation of the digest of the corresponding DNSKEY record.
     */
    digest?: pulumi.Input<string>;
    /**
     * DNSSEC digest type number as a string.
     */
    digestType?: pulumi.Input<string>;
    /**
     * The domain name or numeric ID to create the delegation signer record for.
     */
    domain: pulumi.Input<string>;
    /**
     * A keytag that references the corresponding DNSKEY record.
     */
    keytag?: pulumi.Input<string>;
    /**
     * A public key that references the corresponding DNSKEY record.
     *
     * # Attributes Reference
     */
    publicKey?: pulumi.Input<string>;
}
