// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dnsimple.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dnsimple.inputs.RegisteredDomainDomainRegistrationArgs;
import com.pulumi.dnsimple.inputs.RegisteredDomainRegistrantChangeArgs;
import com.pulumi.dnsimple.inputs.RegisteredDomainTimeoutsArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegisteredDomainState extends com.pulumi.resources.ResourceArgs {

    public static final RegisteredDomainState Empty = new RegisteredDomainState();

    @Import(name="accountId")
    private @Nullable Output<Integer> accountId;

    public Optional<Output<Integer>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * Whether the domain should be set to auto-renew (default: `false`)
     * 
     */
    @Import(name="autoRenewEnabled")
    private @Nullable Output<Boolean> autoRenewEnabled;

    /**
     * @return Whether the domain should be set to auto-renew (default: `false`)
     * 
     */
    public Optional<Output<Boolean>> autoRenewEnabled() {
        return Optional.ofNullable(this.autoRenewEnabled);
    }

    /**
     * The ID of the contact to be used for the domain registration. The contact ID can be changed after the domain has been registered. The change will result in a new registrant change this may result in a [60-day lock](https://support.dnsimple.com/articles/icann-60-day-lock-registrant-change/).
     * 
     */
    @Import(name="contactId")
    private @Nullable Output<Integer> contactId;

    /**
     * @return The ID of the contact to be used for the domain registration. The contact ID can be changed after the domain has been registered. The change will result in a new registrant change this may result in a [60-day lock](https://support.dnsimple.com/articles/icann-60-day-lock-registrant-change/).
     * 
     */
    public Optional<Output<Integer>> contactId() {
        return Optional.ofNullable(this.contactId);
    }

    /**
     * Whether the domain should have DNSSEC enabled (default: `false`)
     * 
     */
    @Import(name="dnssecEnabled")
    private @Nullable Output<Boolean> dnssecEnabled;

    /**
     * @return Whether the domain should have DNSSEC enabled (default: `false`)
     * 
     */
    public Optional<Output<Boolean>> dnssecEnabled() {
        return Optional.ofNullable(this.dnssecEnabled);
    }

    /**
     * The domain registration details. (see below for nested schema)
     * 
     * &lt;a id=&#34;nestedblock--timeouts&#34;&gt;&lt;/a&gt;
     * 
     */
    @Import(name="domainRegistration")
    private @Nullable Output<RegisteredDomainDomainRegistrationArgs> domainRegistration;

    /**
     * @return The domain registration details. (see below for nested schema)
     * 
     * &lt;a id=&#34;nestedblock--timeouts&#34;&gt;&lt;/a&gt;
     * 
     */
    public Optional<Output<RegisteredDomainDomainRegistrationArgs>> domainRegistration() {
        return Optional.ofNullable(this.domainRegistration);
    }

    @Import(name="expiresAt")
    private @Nullable Output<String> expiresAt;

    public Optional<Output<String>> expiresAt() {
        return Optional.ofNullable(this.expiresAt);
    }

    /**
     * A map of extended attributes to be set for the domain registration. To see if there are any required extended attributes for any TLD use our [Lists the TLD Extended Attributes API](https://developer.dnsimple.com/v2/tlds/#getTldExtendedAttributes). The values provided in the `extended_attributes` will also be sent when a registrant change is initiated as part of changing the `contact_id`.
     * 
     */
    @Import(name="extendedAttributes")
    private @Nullable Output<Map<String,String>> extendedAttributes;

    /**
     * @return A map of extended attributes to be set for the domain registration. To see if there are any required extended attributes for any TLD use our [Lists the TLD Extended Attributes API](https://developer.dnsimple.com/v2/tlds/#getTldExtendedAttributes). The values provided in the `extended_attributes` will also be sent when a registrant change is initiated as part of changing the `contact_id`.
     * 
     */
    public Optional<Output<Map<String,String>>> extendedAttributes() {
        return Optional.ofNullable(this.extendedAttributes);
    }

    /**
     * The domain name to be registered
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The domain name to be registered
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The premium price for the domain registration. This is only required if the domain is a premium domain. You can use our [Check domain API](https://developer.dnsimple.com/v2/registrar/#checkDomain) to check if a domain is premium. And [Retrieve domain prices API](https://developer.dnsimple.com/v2/registrar/#getDomainPrices) to retrieve the premium price for a domain.
     * 
     */
    @Import(name="premiumPrice")
    private @Nullable Output<String> premiumPrice;

    /**
     * @return The premium price for the domain registration. This is only required if the domain is a premium domain. You can use our [Check domain API](https://developer.dnsimple.com/v2/registrar/#checkDomain) to check if a domain is premium. And [Retrieve domain prices API](https://developer.dnsimple.com/v2/registrar/#getDomainPrices) to retrieve the premium price for a domain.
     * 
     */
    public Optional<Output<String>> premiumPrice() {
        return Optional.ofNullable(this.premiumPrice);
    }

    /**
     * The registrant change details.
     * 
     */
    @Import(name="registrantChange")
    private @Nullable Output<RegisteredDomainRegistrantChangeArgs> registrantChange;

    /**
     * @return The registrant change details.
     * 
     */
    public Optional<Output<RegisteredDomainRegistrantChangeArgs>> registrantChange() {
        return Optional.ofNullable(this.registrantChange);
    }

    /**
     * The state of the domain.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state of the domain.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * (see below for nested schema)
     * 
     * # Attributes Reference
     * 
     */
    @Import(name="timeouts")
    private @Nullable Output<RegisteredDomainTimeoutsArgs> timeouts;

    /**
     * @return (see below for nested schema)
     * 
     * # Attributes Reference
     * 
     */
    public Optional<Output<RegisteredDomainTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    /**
     * Whether the domain transfer lock protection is enabled (default: `true`)
     * 
     */
    @Import(name="transferLockEnabled")
    private @Nullable Output<Boolean> transferLockEnabled;

    /**
     * @return Whether the domain transfer lock protection is enabled (default: `true`)
     * 
     */
    public Optional<Output<Boolean>> transferLockEnabled() {
        return Optional.ofNullable(this.transferLockEnabled);
    }

    /**
     * The domain name in Unicode format.
     * 
     */
    @Import(name="unicodeName")
    private @Nullable Output<String> unicodeName;

    /**
     * @return The domain name in Unicode format.
     * 
     */
    public Optional<Output<String>> unicodeName() {
        return Optional.ofNullable(this.unicodeName);
    }

    /**
     * Whether the domain should have WhoIs privacy enabled (default: `false`)
     * 
     */
    @Import(name="whoisPrivacyEnabled")
    private @Nullable Output<Boolean> whoisPrivacyEnabled;

    /**
     * @return Whether the domain should have WhoIs privacy enabled (default: `false`)
     * 
     */
    public Optional<Output<Boolean>> whoisPrivacyEnabled() {
        return Optional.ofNullable(this.whoisPrivacyEnabled);
    }

    private RegisteredDomainState() {}

    private RegisteredDomainState(RegisteredDomainState $) {
        this.accountId = $.accountId;
        this.autoRenewEnabled = $.autoRenewEnabled;
        this.contactId = $.contactId;
        this.dnssecEnabled = $.dnssecEnabled;
        this.domainRegistration = $.domainRegistration;
        this.expiresAt = $.expiresAt;
        this.extendedAttributes = $.extendedAttributes;
        this.name = $.name;
        this.premiumPrice = $.premiumPrice;
        this.registrantChange = $.registrantChange;
        this.state = $.state;
        this.timeouts = $.timeouts;
        this.transferLockEnabled = $.transferLockEnabled;
        this.unicodeName = $.unicodeName;
        this.whoisPrivacyEnabled = $.whoisPrivacyEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegisteredDomainState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegisteredDomainState $;

        public Builder() {
            $ = new RegisteredDomainState();
        }

        public Builder(RegisteredDomainState defaults) {
            $ = new RegisteredDomainState(Objects.requireNonNull(defaults));
        }

        public Builder accountId(@Nullable Output<Integer> accountId) {
            $.accountId = accountId;
            return this;
        }

        public Builder accountId(Integer accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param autoRenewEnabled Whether the domain should be set to auto-renew (default: `false`)
         * 
         * @return builder
         * 
         */
        public Builder autoRenewEnabled(@Nullable Output<Boolean> autoRenewEnabled) {
            $.autoRenewEnabled = autoRenewEnabled;
            return this;
        }

        /**
         * @param autoRenewEnabled Whether the domain should be set to auto-renew (default: `false`)
         * 
         * @return builder
         * 
         */
        public Builder autoRenewEnabled(Boolean autoRenewEnabled) {
            return autoRenewEnabled(Output.of(autoRenewEnabled));
        }

        /**
         * @param contactId The ID of the contact to be used for the domain registration. The contact ID can be changed after the domain has been registered. The change will result in a new registrant change this may result in a [60-day lock](https://support.dnsimple.com/articles/icann-60-day-lock-registrant-change/).
         * 
         * @return builder
         * 
         */
        public Builder contactId(@Nullable Output<Integer> contactId) {
            $.contactId = contactId;
            return this;
        }

        /**
         * @param contactId The ID of the contact to be used for the domain registration. The contact ID can be changed after the domain has been registered. The change will result in a new registrant change this may result in a [60-day lock](https://support.dnsimple.com/articles/icann-60-day-lock-registrant-change/).
         * 
         * @return builder
         * 
         */
        public Builder contactId(Integer contactId) {
            return contactId(Output.of(contactId));
        }

        /**
         * @param dnssecEnabled Whether the domain should have DNSSEC enabled (default: `false`)
         * 
         * @return builder
         * 
         */
        public Builder dnssecEnabled(@Nullable Output<Boolean> dnssecEnabled) {
            $.dnssecEnabled = dnssecEnabled;
            return this;
        }

        /**
         * @param dnssecEnabled Whether the domain should have DNSSEC enabled (default: `false`)
         * 
         * @return builder
         * 
         */
        public Builder dnssecEnabled(Boolean dnssecEnabled) {
            return dnssecEnabled(Output.of(dnssecEnabled));
        }

        /**
         * @param domainRegistration The domain registration details. (see below for nested schema)
         * 
         * &lt;a id=&#34;nestedblock--timeouts&#34;&gt;&lt;/a&gt;
         * 
         * @return builder
         * 
         */
        public Builder domainRegistration(@Nullable Output<RegisteredDomainDomainRegistrationArgs> domainRegistration) {
            $.domainRegistration = domainRegistration;
            return this;
        }

        /**
         * @param domainRegistration The domain registration details. (see below for nested schema)
         * 
         * &lt;a id=&#34;nestedblock--timeouts&#34;&gt;&lt;/a&gt;
         * 
         * @return builder
         * 
         */
        public Builder domainRegistration(RegisteredDomainDomainRegistrationArgs domainRegistration) {
            return domainRegistration(Output.of(domainRegistration));
        }

        public Builder expiresAt(@Nullable Output<String> expiresAt) {
            $.expiresAt = expiresAt;
            return this;
        }

        public Builder expiresAt(String expiresAt) {
            return expiresAt(Output.of(expiresAt));
        }

        /**
         * @param extendedAttributes A map of extended attributes to be set for the domain registration. To see if there are any required extended attributes for any TLD use our [Lists the TLD Extended Attributes API](https://developer.dnsimple.com/v2/tlds/#getTldExtendedAttributes). The values provided in the `extended_attributes` will also be sent when a registrant change is initiated as part of changing the `contact_id`.
         * 
         * @return builder
         * 
         */
        public Builder extendedAttributes(@Nullable Output<Map<String,String>> extendedAttributes) {
            $.extendedAttributes = extendedAttributes;
            return this;
        }

        /**
         * @param extendedAttributes A map of extended attributes to be set for the domain registration. To see if there are any required extended attributes for any TLD use our [Lists the TLD Extended Attributes API](https://developer.dnsimple.com/v2/tlds/#getTldExtendedAttributes). The values provided in the `extended_attributes` will also be sent when a registrant change is initiated as part of changing the `contact_id`.
         * 
         * @return builder
         * 
         */
        public Builder extendedAttributes(Map<String,String> extendedAttributes) {
            return extendedAttributes(Output.of(extendedAttributes));
        }

        /**
         * @param name The domain name to be registered
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The domain name to be registered
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param premiumPrice The premium price for the domain registration. This is only required if the domain is a premium domain. You can use our [Check domain API](https://developer.dnsimple.com/v2/registrar/#checkDomain) to check if a domain is premium. And [Retrieve domain prices API](https://developer.dnsimple.com/v2/registrar/#getDomainPrices) to retrieve the premium price for a domain.
         * 
         * @return builder
         * 
         */
        public Builder premiumPrice(@Nullable Output<String> premiumPrice) {
            $.premiumPrice = premiumPrice;
            return this;
        }

        /**
         * @param premiumPrice The premium price for the domain registration. This is only required if the domain is a premium domain. You can use our [Check domain API](https://developer.dnsimple.com/v2/registrar/#checkDomain) to check if a domain is premium. And [Retrieve domain prices API](https://developer.dnsimple.com/v2/registrar/#getDomainPrices) to retrieve the premium price for a domain.
         * 
         * @return builder
         * 
         */
        public Builder premiumPrice(String premiumPrice) {
            return premiumPrice(Output.of(premiumPrice));
        }

        /**
         * @param registrantChange The registrant change details.
         * 
         * @return builder
         * 
         */
        public Builder registrantChange(@Nullable Output<RegisteredDomainRegistrantChangeArgs> registrantChange) {
            $.registrantChange = registrantChange;
            return this;
        }

        /**
         * @param registrantChange The registrant change details.
         * 
         * @return builder
         * 
         */
        public Builder registrantChange(RegisteredDomainRegistrantChangeArgs registrantChange) {
            return registrantChange(Output.of(registrantChange));
        }

        /**
         * @param state The state of the domain.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of the domain.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param timeouts (see below for nested schema)
         * 
         * # Attributes Reference
         * 
         * @return builder
         * 
         */
        public Builder timeouts(@Nullable Output<RegisteredDomainTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        /**
         * @param timeouts (see below for nested schema)
         * 
         * # Attributes Reference
         * 
         * @return builder
         * 
         */
        public Builder timeouts(RegisteredDomainTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        /**
         * @param transferLockEnabled Whether the domain transfer lock protection is enabled (default: `true`)
         * 
         * @return builder
         * 
         */
        public Builder transferLockEnabled(@Nullable Output<Boolean> transferLockEnabled) {
            $.transferLockEnabled = transferLockEnabled;
            return this;
        }

        /**
         * @param transferLockEnabled Whether the domain transfer lock protection is enabled (default: `true`)
         * 
         * @return builder
         * 
         */
        public Builder transferLockEnabled(Boolean transferLockEnabled) {
            return transferLockEnabled(Output.of(transferLockEnabled));
        }

        /**
         * @param unicodeName The domain name in Unicode format.
         * 
         * @return builder
         * 
         */
        public Builder unicodeName(@Nullable Output<String> unicodeName) {
            $.unicodeName = unicodeName;
            return this;
        }

        /**
         * @param unicodeName The domain name in Unicode format.
         * 
         * @return builder
         * 
         */
        public Builder unicodeName(String unicodeName) {
            return unicodeName(Output.of(unicodeName));
        }

        /**
         * @param whoisPrivacyEnabled Whether the domain should have WhoIs privacy enabled (default: `false`)
         * 
         * @return builder
         * 
         */
        public Builder whoisPrivacyEnabled(@Nullable Output<Boolean> whoisPrivacyEnabled) {
            $.whoisPrivacyEnabled = whoisPrivacyEnabled;
            return this;
        }

        /**
         * @param whoisPrivacyEnabled Whether the domain should have WhoIs privacy enabled (default: `false`)
         * 
         * @return builder
         * 
         */
        public Builder whoisPrivacyEnabled(Boolean whoisPrivacyEnabled) {
            return whoisPrivacyEnabled(Output.of(whoisPrivacyEnabled));
        }

        public RegisteredDomainState build() {
            return $;
        }
    }

}
