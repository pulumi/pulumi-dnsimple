// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dnsimple.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainDelegationState extends com.pulumi.resources.ResourceArgs {

    public static final DomainDelegationState Empty = new DomainDelegationState();

    /**
     * The domain name.
     * 
     */
    @Import(name="domain")
    private @Nullable Output<String> domain;

    /**
     * @return The domain name.
     * 
     */
    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * The list of name servers to delegate to.
     * 
     * # Attributes Reference
     * 
     */
    @Import(name="nameServers")
    private @Nullable Output<List<String>> nameServers;

    /**
     * @return The list of name servers to delegate to.
     * 
     * # Attributes Reference
     * 
     */
    public Optional<Output<List<String>>> nameServers() {
        return Optional.ofNullable(this.nameServers);
    }

    private DomainDelegationState() {}

    private DomainDelegationState(DomainDelegationState $) {
        this.domain = $.domain;
        this.nameServers = $.nameServers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainDelegationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainDelegationState $;

        public Builder() {
            $ = new DomainDelegationState();
        }

        public Builder(DomainDelegationState defaults) {
            $ = new DomainDelegationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param domain The domain name.
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain The domain name.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param nameServers The list of name servers to delegate to.
         * 
         * # Attributes Reference
         * 
         * @return builder
         * 
         */
        public Builder nameServers(@Nullable Output<List<String>> nameServers) {
            $.nameServers = nameServers;
            return this;
        }

        /**
         * @param nameServers The list of name servers to delegate to.
         * 
         * # Attributes Reference
         * 
         * @return builder
         * 
         */
        public Builder nameServers(List<String> nameServers) {
            return nameServers(Output.of(nameServers));
        }

        /**
         * @param nameServers The list of name servers to delegate to.
         * 
         * # Attributes Reference
         * 
         * @return builder
         * 
         */
        public Builder nameServers(String... nameServers) {
            return nameServers(List.of(nameServers));
        }

        public DomainDelegationState build() {
            return $;
        }
    }

}
