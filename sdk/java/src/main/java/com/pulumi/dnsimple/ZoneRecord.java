// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dnsimple;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.dnsimple.Utilities;
import com.pulumi.dnsimple.ZoneRecordArgs;
import com.pulumi.dnsimple.inputs.ZoneRecordState;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a DNSimple zone record resource.
 * 
 * ## Deprecation warning
 * 
 * You can still use the _deprecated_ `dnsimple.Record` configuration, but be aware that it will be removed in the
 * upcoming 1.0.0 release.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.dnsimple.ZoneRecord;
 * import com.pulumi.dnsimple.ZoneRecordArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // Add a record to the root domain
 *         var foobar = new ZoneRecord(&#34;foobar&#34;, ZoneRecordArgs.builder()        
 *             .zoneName(dnsimpleDomain)
 *             .name(&#34;&#34;)
 *             .value(&#34;192.168.0.11&#34;)
 *             .type(&#34;A&#34;)
 *             .ttl(3600)
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.dnsimple.ZoneRecord;
 * import com.pulumi.dnsimple.ZoneRecordArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // Add a record to a sub-domain
 *         var foobar = new ZoneRecord(&#34;foobar&#34;, ZoneRecordArgs.builder()        
 *             .zoneName(dnsimpleDomain)
 *             .name(&#34;terraform&#34;)
 *             .value(&#34;192.168.0.11&#34;)
 *             .type(&#34;A&#34;)
 *             .ttl(3600)
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * DNSimple resources can be imported using their parent zone name (domain name) and numeric record ID.
 * 
 * __Importing record example.com with record ID 1234__
 * 
 * ```sh
 * $ pulumi import dnsimple:index/zoneRecord:ZoneRecord resource_name example.com_1234
 * ```
 * __Importing record www.example.com with record ID 1234__
 * 
 * ```sh
 * $ pulumi import dnsimple:index/zoneRecord:ZoneRecord resource_name example.com_1234
 * ```
 * The record ID can be found in the URL when editing a record on the DNSimple web dashboard.
 * 
 */
@ResourceType(type="dnsimple:index/zoneRecord:ZoneRecord")
public class ZoneRecord extends com.pulumi.resources.CustomResource {
    /**
     * The name of the record
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the record
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The priority of the record - only useful for some record types
     * 
     */
    @Export(name="priority", refs={String.class}, tree="[0]")
    private Output<String> priority;

    /**
     * @return The priority of the record - only useful for some record types
     * 
     */
    public Output<String> priority() {
        return this.priority;
    }
    /**
     * The FQDN of the record
     * 
     */
    @Export(name="qualifiedName", refs={String.class}, tree="[0]")
    private Output<String> qualifiedName;

    /**
     * @return The FQDN of the record
     * 
     */
    public Output<String> qualifiedName() {
        return this.qualifiedName;
    }
    /**
     * The TTL of the record
     * 
     */
    @Export(name="ttl", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ttl;

    /**
     * @return The TTL of the record
     * 
     */
    public Output<Optional<String>> ttl() {
        return Codegen.optional(this.ttl);
    }
    /**
     * The type of the record
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return The type of the record
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * The value of the record
     * 
     */
    @Export(name="value", refs={String.class}, tree="[0]")
    private Output<String> value;

    /**
     * @return The value of the record
     * 
     */
    public Output<String> value() {
        return this.value;
    }
    /**
     * The domain ID of the record
     * 
     */
    @Export(name="zoneId", refs={String.class}, tree="[0]")
    private Output<String> zoneId;

    /**
     * @return The domain ID of the record
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }
    /**
     * The domain to add the record to
     * 
     */
    @Export(name="zoneName", refs={String.class}, tree="[0]")
    private Output<String> zoneName;

    /**
     * @return The domain to add the record to
     * 
     */
    public Output<String> zoneName() {
        return this.zoneName;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ZoneRecord(String name) {
        this(name, ZoneRecordArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ZoneRecord(String name, ZoneRecordArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ZoneRecord(String name, ZoneRecordArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dnsimple:index/zoneRecord:ZoneRecord", name, args == null ? ZoneRecordArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ZoneRecord(String name, Output<String> id, @Nullable ZoneRecordState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dnsimple:index/zoneRecord:ZoneRecord", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ZoneRecord get(String name, Output<String> id, @Nullable ZoneRecordState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ZoneRecord(name, id, state, options);
    }
}
