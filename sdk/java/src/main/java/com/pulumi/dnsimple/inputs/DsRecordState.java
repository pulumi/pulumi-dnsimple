// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dnsimple.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DsRecordState extends com.pulumi.resources.ResourceArgs {

    public static final DsRecordState Empty = new DsRecordState();

    /**
     * DNSSEC algorithm number as a string.
     * 
     */
    @Import(name="algorithm")
    private @Nullable Output<String> algorithm;

    /**
     * @return DNSSEC algorithm number as a string.
     * 
     */
    public Optional<Output<String>> algorithm() {
        return Optional.ofNullable(this.algorithm);
    }

    /**
     * The time the DS record was created at.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return The time the DS record was created at.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * The hexidecimal representation of the digest of the corresponding DNSKEY record.
     * 
     */
    @Import(name="digest")
    private @Nullable Output<String> digest;

    /**
     * @return The hexidecimal representation of the digest of the corresponding DNSKEY record.
     * 
     */
    public Optional<Output<String>> digest() {
        return Optional.ofNullable(this.digest);
    }

    /**
     * DNSSEC digest type number as a string.
     * 
     */
    @Import(name="digestType")
    private @Nullable Output<String> digestType;

    /**
     * @return DNSSEC digest type number as a string.
     * 
     */
    public Optional<Output<String>> digestType() {
        return Optional.ofNullable(this.digestType);
    }

    /**
     * The domain name or numeric ID to create the delegation signer record for.
     * 
     */
    @Import(name="domain")
    private @Nullable Output<String> domain;

    /**
     * @return The domain name or numeric ID to create the delegation signer record for.
     * 
     */
    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * A keytag that references the corresponding DNSKEY record.
     * 
     */
    @Import(name="keytag")
    private @Nullable Output<String> keytag;

    /**
     * @return A keytag that references the corresponding DNSKEY record.
     * 
     */
    public Optional<Output<String>> keytag() {
        return Optional.ofNullable(this.keytag);
    }

    /**
     * A public key that references the corresponding DNSKEY record.
     * 
     * # Attributes Reference
     * 
     */
    @Import(name="publicKey")
    private @Nullable Output<String> publicKey;

    /**
     * @return A public key that references the corresponding DNSKEY record.
     * 
     * # Attributes Reference
     * 
     */
    public Optional<Output<String>> publicKey() {
        return Optional.ofNullable(this.publicKey);
    }

    /**
     * The time the DS record was last updated at.
     * 
     */
    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    /**
     * @return The time the DS record was last updated at.
     * 
     */
    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    private DsRecordState() {}

    private DsRecordState(DsRecordState $) {
        this.algorithm = $.algorithm;
        this.createdAt = $.createdAt;
        this.digest = $.digest;
        this.digestType = $.digestType;
        this.domain = $.domain;
        this.keytag = $.keytag;
        this.publicKey = $.publicKey;
        this.updatedAt = $.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DsRecordState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DsRecordState $;

        public Builder() {
            $ = new DsRecordState();
        }

        public Builder(DsRecordState defaults) {
            $ = new DsRecordState(Objects.requireNonNull(defaults));
        }

        /**
         * @param algorithm DNSSEC algorithm number as a string.
         * 
         * @return builder
         * 
         */
        public Builder algorithm(@Nullable Output<String> algorithm) {
            $.algorithm = algorithm;
            return this;
        }

        /**
         * @param algorithm DNSSEC algorithm number as a string.
         * 
         * @return builder
         * 
         */
        public Builder algorithm(String algorithm) {
            return algorithm(Output.of(algorithm));
        }

        /**
         * @param createdAt The time the DS record was created at.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt The time the DS record was created at.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param digest The hexidecimal representation of the digest of the corresponding DNSKEY record.
         * 
         * @return builder
         * 
         */
        public Builder digest(@Nullable Output<String> digest) {
            $.digest = digest;
            return this;
        }

        /**
         * @param digest The hexidecimal representation of the digest of the corresponding DNSKEY record.
         * 
         * @return builder
         * 
         */
        public Builder digest(String digest) {
            return digest(Output.of(digest));
        }

        /**
         * @param digestType DNSSEC digest type number as a string.
         * 
         * @return builder
         * 
         */
        public Builder digestType(@Nullable Output<String> digestType) {
            $.digestType = digestType;
            return this;
        }

        /**
         * @param digestType DNSSEC digest type number as a string.
         * 
         * @return builder
         * 
         */
        public Builder digestType(String digestType) {
            return digestType(Output.of(digestType));
        }

        /**
         * @param domain The domain name or numeric ID to create the delegation signer record for.
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain The domain name or numeric ID to create the delegation signer record for.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param keytag A keytag that references the corresponding DNSKEY record.
         * 
         * @return builder
         * 
         */
        public Builder keytag(@Nullable Output<String> keytag) {
            $.keytag = keytag;
            return this;
        }

        /**
         * @param keytag A keytag that references the corresponding DNSKEY record.
         * 
         * @return builder
         * 
         */
        public Builder keytag(String keytag) {
            return keytag(Output.of(keytag));
        }

        /**
         * @param publicKey A public key that references the corresponding DNSKEY record.
         * 
         * # Attributes Reference
         * 
         * @return builder
         * 
         */
        public Builder publicKey(@Nullable Output<String> publicKey) {
            $.publicKey = publicKey;
            return this;
        }

        /**
         * @param publicKey A public key that references the corresponding DNSKEY record.
         * 
         * # Attributes Reference
         * 
         * @return builder
         * 
         */
        public Builder publicKey(String publicKey) {
            return publicKey(Output.of(publicKey));
        }

        /**
         * @param updatedAt The time the DS record was last updated at.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param updatedAt The time the DS record was last updated at.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        public DsRecordState build() {
            return $;
        }
    }

}
