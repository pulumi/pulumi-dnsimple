// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dnsimple;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.dnsimple.Utilities;
import com.pulumi.dnsimple.inputs.GetCertificateArgs;
import com.pulumi.dnsimple.inputs.GetCertificatePlainArgs;
import com.pulumi.dnsimple.inputs.GetZoneArgs;
import com.pulumi.dnsimple.inputs.GetZonePlainArgs;
import com.pulumi.dnsimple.outputs.GetCertificateResult;
import com.pulumi.dnsimple.outputs.GetZoneResult;
import java.util.concurrent.CompletableFuture;

public final class DnsimpleFunctions {
    /**
     * Provides a DNSimple certificate data source.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dnsimple.DnsimpleFunctions;
     * import com.pulumi.dnsimple.inputs.GetCertificateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foobar = DnsimpleFunctions.getCertificate(GetCertificateArgs.builder()
     *             .domain(dnsimpleDomain)
     *             .certificateId(dnsimpleCertificateId)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCertificateResult> getCertificate(GetCertificateArgs args) {
        return getCertificate(args, InvokeOptions.Empty);
    }
    /**
     * Provides a DNSimple certificate data source.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dnsimple.DnsimpleFunctions;
     * import com.pulumi.dnsimple.inputs.GetCertificateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foobar = DnsimpleFunctions.getCertificate(GetCertificateArgs.builder()
     *             .domain(dnsimpleDomain)
     *             .certificateId(dnsimpleCertificateId)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCertificateResult> getCertificatePlain(GetCertificatePlainArgs args) {
        return getCertificatePlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides a DNSimple certificate data source.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dnsimple.DnsimpleFunctions;
     * import com.pulumi.dnsimple.inputs.GetCertificateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foobar = DnsimpleFunctions.getCertificate(GetCertificateArgs.builder()
     *             .domain(dnsimpleDomain)
     *             .certificateId(dnsimpleCertificateId)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCertificateResult> getCertificate(GetCertificateArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("dnsimple:index/getCertificate:getCertificate", TypeShape.of(GetCertificateResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a DNSimple certificate data source.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dnsimple.DnsimpleFunctions;
     * import com.pulumi.dnsimple.inputs.GetCertificateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foobar = DnsimpleFunctions.getCertificate(GetCertificateArgs.builder()
     *             .domain(dnsimpleDomain)
     *             .certificateId(dnsimpleCertificateId)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCertificateResult> getCertificatePlain(GetCertificatePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("dnsimple:index/getCertificate:getCertificate", TypeShape.of(GetCertificateResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information about a DNSimple zone.
     * 
     * Get zone:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dnsimple.DnsimpleFunctions;
     * import com.pulumi.dnsimple.inputs.GetZoneArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foobar = DnsimpleFunctions.getZone(GetZoneArgs.builder()
     *             .name("dnsimple.com")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * The following arguments are supported:
     * 
     * * `name` - (Required) The name of the zone
     * 
     * The following additional attributes are exported:
     * 
     * * `id` - The zone ID
     * * `account_id` - The account ID
     * * `reverse` - True for a reverse zone, false for a forward zone.
     * 
     */
    public static Output<GetZoneResult> getZone(GetZoneArgs args) {
        return getZone(args, InvokeOptions.Empty);
    }
    /**
     * Get information about a DNSimple zone.
     * 
     * Get zone:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dnsimple.DnsimpleFunctions;
     * import com.pulumi.dnsimple.inputs.GetZoneArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foobar = DnsimpleFunctions.getZone(GetZoneArgs.builder()
     *             .name("dnsimple.com")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * The following arguments are supported:
     * 
     * * `name` - (Required) The name of the zone
     * 
     * The following additional attributes are exported:
     * 
     * * `id` - The zone ID
     * * `account_id` - The account ID
     * * `reverse` - True for a reverse zone, false for a forward zone.
     * 
     */
    public static CompletableFuture<GetZoneResult> getZonePlain(GetZonePlainArgs args) {
        return getZonePlain(args, InvokeOptions.Empty);
    }
    /**
     * Get information about a DNSimple zone.
     * 
     * Get zone:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dnsimple.DnsimpleFunctions;
     * import com.pulumi.dnsimple.inputs.GetZoneArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foobar = DnsimpleFunctions.getZone(GetZoneArgs.builder()
     *             .name("dnsimple.com")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * The following arguments are supported:
     * 
     * * `name` - (Required) The name of the zone
     * 
     * The following additional attributes are exported:
     * 
     * * `id` - The zone ID
     * * `account_id` - The account ID
     * * `reverse` - True for a reverse zone, false for a forward zone.
     * 
     */
    public static Output<GetZoneResult> getZone(GetZoneArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("dnsimple:index/getZone:getZone", TypeShape.of(GetZoneResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information about a DNSimple zone.
     * 
     * Get zone:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.dnsimple.DnsimpleFunctions;
     * import com.pulumi.dnsimple.inputs.GetZoneArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foobar = DnsimpleFunctions.getZone(GetZoneArgs.builder()
     *             .name("dnsimple.com")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * The following arguments are supported:
     * 
     * * `name` - (Required) The name of the zone
     * 
     * The following additional attributes are exported:
     * 
     * * `id` - The zone ID
     * * `account_id` - The account ID
     * * `reverse` - True for a reverse zone, false for a forward zone.
     * 
     */
    public static CompletableFuture<GetZoneResult> getZonePlain(GetZonePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("dnsimple:index/getZone:getZone", TypeShape.of(GetZoneResult.class), args, Utilities.withVersion(options));
    }
}
