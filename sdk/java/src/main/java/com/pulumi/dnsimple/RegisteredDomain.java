// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dnsimple;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.dnsimple.RegisteredDomainArgs;
import com.pulumi.dnsimple.Utilities;
import com.pulumi.dnsimple.inputs.RegisteredDomainState;
import com.pulumi.dnsimple.outputs.RegisteredDomainDomainRegistration;
import com.pulumi.dnsimple.outputs.RegisteredDomainRegistrantChange;
import com.pulumi.dnsimple.outputs.RegisteredDomainTimeouts;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a DNSimple registered domain resource.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.dnsimple.Contact;
 * import com.pulumi.dnsimple.ContactArgs;
 * import com.pulumi.dnsimple.RegisteredDomain;
 * import com.pulumi.dnsimple.RegisteredDomainArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var aliceMain = new Contact("aliceMain", ContactArgs.builder()
 *             .label("Alice Appleseed")
 *             .firstName("Alice Main")
 *             .lastName("Appleseed")
 *             .organizationName("Contoso")
 *             .jobTitle("Manager")
 *             .address1("Level 1, 2 Main St")
 *             .address2("Marsfield")
 *             .city("San Francisco")
 *             .stateProvince("California")
 *             .postalCode("90210")
 *             .country("US")
 *             .phone("+1401239523")
 *             .fax("+1849491024")
 *             .email("apple{@literal @}contoso.com")
 *             .build());
 * 
 *         var appleseedBio = new RegisteredDomain("appleseedBio", RegisteredDomainArgs.builder()
 *             .name("appleseed.bio")
 *             .contactId(aliceMain.id())
 *             .autoRenewEnabled(true)
 *             .transferLockEnabled(true)
 *             .whoisPrivacyEnabled(true)
 *             .dnssecEnabled(false)
 *             .extendedAttributes(Map.of("bio_agree", "I Agree"))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * DNSimple registered domains can be imported using their domain name and **optionally** with domain registration ID.
 * 
 * **Importing registered domain example.com**
 * 
 * bash
 * 
 * ```sh
 * $ pulumi import dnsimple:index/registeredDomain:RegisteredDomain resource_name example.com
 * ```
 * 
 * **Importing registered domain example.com with domain registration ID 1234**
 * 
 * bash
 * 
 * ```sh
 * $ pulumi import dnsimple:index/registeredDomain:RegisteredDomain resource_name example.com_1234
 * ```
 * 
 */
@ResourceType(type="dnsimple:index/registeredDomain:RegisteredDomain")
public class RegisteredDomain extends com.pulumi.resources.CustomResource {
    @Export(name="accountId", refs={Integer.class}, tree="[0]")
    private Output<Integer> accountId;

    public Output<Integer> accountId() {
        return this.accountId;
    }
    /**
     * Whether the domain should be set to auto-renew (default: `false`)
     * 
     */
    @Export(name="autoRenewEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> autoRenewEnabled;

    /**
     * @return Whether the domain should be set to auto-renew (default: `false`)
     * 
     */
    public Output<Boolean> autoRenewEnabled() {
        return this.autoRenewEnabled;
    }
    /**
     * The ID of the contact to be used for the domain registration. The contact ID can be changed after the domain has been registered. The change will result in a new registrant change this may result in a [60-day lock](https://support.dnsimple.com/articles/icann-60-day-lock-registrant-change/).
     * 
     */
    @Export(name="contactId", refs={Integer.class}, tree="[0]")
    private Output<Integer> contactId;

    /**
     * @return The ID of the contact to be used for the domain registration. The contact ID can be changed after the domain has been registered. The change will result in a new registrant change this may result in a [60-day lock](https://support.dnsimple.com/articles/icann-60-day-lock-registrant-change/).
     * 
     */
    public Output<Integer> contactId() {
        return this.contactId;
    }
    /**
     * Whether the domain should have DNSSEC enabled (default: `false`)
     * 
     */
    @Export(name="dnssecEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> dnssecEnabled;

    /**
     * @return Whether the domain should have DNSSEC enabled (default: `false`)
     * 
     */
    public Output<Boolean> dnssecEnabled() {
        return this.dnssecEnabled;
    }
    /**
     * The domain registration details. (see below for nested schema)
     * 
     * &lt;a id=&#34;nestedblock--timeouts&#34;&gt;&lt;/a&gt;
     * 
     */
    @Export(name="domainRegistration", refs={RegisteredDomainDomainRegistration.class}, tree="[0]")
    private Output<RegisteredDomainDomainRegistration> domainRegistration;

    /**
     * @return The domain registration details. (see below for nested schema)
     * 
     * &lt;a id=&#34;nestedblock--timeouts&#34;&gt;&lt;/a&gt;
     * 
     */
    public Output<RegisteredDomainDomainRegistration> domainRegistration() {
        return this.domainRegistration;
    }
    @Export(name="expiresAt", refs={String.class}, tree="[0]")
    private Output<String> expiresAt;

    public Output<String> expiresAt() {
        return this.expiresAt;
    }
    /**
     * A map of extended attributes to be set for the domain registration. To see if there are any required extended attributes for any TLD use our [Lists the TLD Extended Attributes API](https://developer.dnsimple.com/v2/tlds/#getTldExtendedAttributes). The values provided in the `extended_attributes` will also be sent when a registrant change is initiated as part of changing the `contact_id`.
     * 
     */
    @Export(name="extendedAttributes", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> extendedAttributes;

    /**
     * @return A map of extended attributes to be set for the domain registration. To see if there are any required extended attributes for any TLD use our [Lists the TLD Extended Attributes API](https://developer.dnsimple.com/v2/tlds/#getTldExtendedAttributes). The values provided in the `extended_attributes` will also be sent when a registrant change is initiated as part of changing the `contact_id`.
     * 
     */
    public Output<Optional<Map<String,String>>> extendedAttributes() {
        return Codegen.optional(this.extendedAttributes);
    }
    /**
     * The domain name to be registered
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The domain name to be registered
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The premium price for the domain registration. This is only required if the domain is a premium domain. You can use our [Check domain API](https://developer.dnsimple.com/v2/registrar/#checkDomain) to check if a domain is premium. And [Retrieve domain prices API](https://developer.dnsimple.com/v2/registrar/#getDomainPrices) to retrieve the premium price for a domain.
     * 
     */
    @Export(name="premiumPrice", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> premiumPrice;

    /**
     * @return The premium price for the domain registration. This is only required if the domain is a premium domain. You can use our [Check domain API](https://developer.dnsimple.com/v2/registrar/#checkDomain) to check if a domain is premium. And [Retrieve domain prices API](https://developer.dnsimple.com/v2/registrar/#getDomainPrices) to retrieve the premium price for a domain.
     * 
     */
    public Output<Optional<String>> premiumPrice() {
        return Codegen.optional(this.premiumPrice);
    }
    /**
     * The registrant change details.
     * 
     */
    @Export(name="registrantChange", refs={RegisteredDomainRegistrantChange.class}, tree="[0]")
    private Output<RegisteredDomainRegistrantChange> registrantChange;

    /**
     * @return The registrant change details.
     * 
     */
    public Output<RegisteredDomainRegistrantChange> registrantChange() {
        return this.registrantChange;
    }
    /**
     * The state of the domain.
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return The state of the domain.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * (see below for nested schema)
     * 
     * # Attributes Reference
     * 
     */
    @Export(name="timeouts", refs={RegisteredDomainTimeouts.class}, tree="[0]")
    private Output</* @Nullable */ RegisteredDomainTimeouts> timeouts;

    /**
     * @return (see below for nested schema)
     * 
     * # Attributes Reference
     * 
     */
    public Output<Optional<RegisteredDomainTimeouts>> timeouts() {
        return Codegen.optional(this.timeouts);
    }
    /**
     * Whether the domain transfer lock protection is enabled (default: `true`)
     * 
     */
    @Export(name="transferLockEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> transferLockEnabled;

    /**
     * @return Whether the domain transfer lock protection is enabled (default: `true`)
     * 
     */
    public Output<Boolean> transferLockEnabled() {
        return this.transferLockEnabled;
    }
    /**
     * The domain name in Unicode format.
     * 
     */
    @Export(name="unicodeName", refs={String.class}, tree="[0]")
    private Output<String> unicodeName;

    /**
     * @return The domain name in Unicode format.
     * 
     */
    public Output<String> unicodeName() {
        return this.unicodeName;
    }
    /**
     * Whether the domain should have WhoIs privacy enabled (default: `false`)
     * 
     */
    @Export(name="whoisPrivacyEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> whoisPrivacyEnabled;

    /**
     * @return Whether the domain should have WhoIs privacy enabled (default: `false`)
     * 
     */
    public Output<Boolean> whoisPrivacyEnabled() {
        return this.whoisPrivacyEnabled;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public RegisteredDomain(String name) {
        this(name, RegisteredDomainArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public RegisteredDomain(String name, RegisteredDomainArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public RegisteredDomain(String name, RegisteredDomainArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dnsimple:index/registeredDomain:RegisteredDomain", name, args == null ? RegisteredDomainArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private RegisteredDomain(String name, Output<String> id, @Nullable RegisteredDomainState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dnsimple:index/registeredDomain:RegisteredDomain", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static RegisteredDomain get(String name, Output<String> id, @Nullable RegisteredDomainState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new RegisteredDomain(name, id, state, options);
    }
}
