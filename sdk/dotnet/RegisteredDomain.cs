// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DNSimple
{
    /// <summary>
    /// Provides a DNSimple registered domain resource.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using DNSimple = Pulumi.DNSimple;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var aliceMain = new DNSimple.Contact("alice_main", new()
    ///     {
    ///         Label = "Alice Appleseed",
    ///         FirstName = "Alice Main",
    ///         LastName = "Appleseed",
    ///         OrganizationName = "Contoso",
    ///         JobTitle = "Manager",
    ///         Address1 = "Level 1, 2 Main St",
    ///         Address2 = "Marsfield",
    ///         City = "San Francisco",
    ///         StateProvince = "California",
    ///         PostalCode = "90210",
    ///         Country = "US",
    ///         Phone = "+1401239523",
    ///         Fax = "+1849491024",
    ///         Email = "apple@contoso.com",
    ///     });
    /// 
    ///     var appleseedBio = new DNSimple.RegisteredDomain("appleseed_bio", new()
    ///     {
    ///         Name = "appleseed.bio",
    ///         ContactId = aliceMain.Id,
    ///         AutoRenewEnabled = true,
    ///         TransferLockEnabled = true,
    ///         WhoisPrivacyEnabled = true,
    ///         DnssecEnabled = false,
    ///         ExtendedAttributes = 
    ///         {
    ///             { "bio_agree", "I Agree" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// DNSimple registered domains can be imported using their domain name and **optionally** with domain registration ID.
    /// 
    /// **Importing registered domain example.com**
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import dnsimple:index/registeredDomain:RegisteredDomain resource_name example.com
    /// ```
    /// 
    /// **Importing registered domain example.com with domain registration ID 1234**
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import dnsimple:index/registeredDomain:RegisteredDomain resource_name example.com_1234
    /// ```
    /// </summary>
    [DNSimpleResourceType("dnsimple:index/registeredDomain:RegisteredDomain")]
    public partial class RegisteredDomain : global::Pulumi.CustomResource
    {
        [Output("accountId")]
        public Output<int> AccountId { get; private set; } = null!;

        /// <summary>
        /// Whether the domain should be set to auto-renew (default: `false`)
        /// </summary>
        [Output("autoRenewEnabled")]
        public Output<bool> AutoRenewEnabled { get; private set; } = null!;

        /// <summary>
        /// The ID of the contact to be used for the domain registration. The contact ID can be changed after the domain has been registered. The change will result in a new registrant change this may result in a [60-day lock](https://support.dnsimple.com/articles/icann-60-day-lock-registrant-change/).
        /// </summary>
        [Output("contactId")]
        public Output<int> ContactId { get; private set; } = null!;

        /// <summary>
        /// Whether the domain should have DNSSEC enabled (default: `false`)
        /// </summary>
        [Output("dnssecEnabled")]
        public Output<bool> DnssecEnabled { get; private set; } = null!;

        /// <summary>
        /// The domain registration details. (see below for nested schema)
        /// 
        /// &lt;a id="nestedblock--timeouts"&gt;&lt;/a&gt;
        /// </summary>
        [Output("domainRegistration")]
        public Output<Outputs.RegisteredDomainDomainRegistration> DomainRegistration { get; private set; } = null!;

        [Output("expiresAt")]
        public Output<string> ExpiresAt { get; private set; } = null!;

        /// <summary>
        /// A map of extended attributes to be set for the domain registration. To see if there are any required extended attributes for any TLD use our [Lists the TLD Extended Attributes API](https://developer.dnsimple.com/v2/tlds/#getTldExtendedAttributes). The values provided in the `extended_attributes` will also be sent when a registrant change is initiated as part of changing the `contact_id`.
        /// </summary>
        [Output("extendedAttributes")]
        public Output<ImmutableDictionary<string, string>?> ExtendedAttributes { get; private set; } = null!;

        /// <summary>
        /// The domain name to be registered
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The premium price for the domain registration. This is only required if the domain is a premium domain. You can use our [Check domain API](https://developer.dnsimple.com/v2/registrar/#checkDomain) to check if a domain is premium. And [Retrieve domain prices API](https://developer.dnsimple.com/v2/registrar/#getDomainPrices) to retrieve the premium price for a domain.
        /// </summary>
        [Output("premiumPrice")]
        public Output<string?> PremiumPrice { get; private set; } = null!;

        /// <summary>
        /// The registrant change details.
        /// </summary>
        [Output("registrantChange")]
        public Output<Outputs.RegisteredDomainRegistrantChange> RegistrantChange { get; private set; } = null!;

        /// <summary>
        /// The state of the domain.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// (see below for nested schema)
        /// 
        /// # Attributes Reference
        /// </summary>
        [Output("timeouts")]
        public Output<Outputs.RegisteredDomainTimeouts?> Timeouts { get; private set; } = null!;

        /// <summary>
        /// Whether the domain transfer lock protection is enabled (default: `true`)
        /// </summary>
        [Output("transferLockEnabled")]
        public Output<bool> TransferLockEnabled { get; private set; } = null!;

        /// <summary>
        /// The domain name in Unicode format.
        /// </summary>
        [Output("unicodeName")]
        public Output<string> UnicodeName { get; private set; } = null!;

        /// <summary>
        /// Whether the domain should have WhoIs privacy enabled (default: `false`)
        /// </summary>
        [Output("whoisPrivacyEnabled")]
        public Output<bool> WhoisPrivacyEnabled { get; private set; } = null!;


        /// <summary>
        /// Create a RegisteredDomain resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RegisteredDomain(string name, RegisteredDomainArgs args, CustomResourceOptions? options = null)
            : base("dnsimple:index/registeredDomain:RegisteredDomain", name, args ?? new RegisteredDomainArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RegisteredDomain(string name, Input<string> id, RegisteredDomainState? state = null, CustomResourceOptions? options = null)
            : base("dnsimple:index/registeredDomain:RegisteredDomain", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RegisteredDomain resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RegisteredDomain Get(string name, Input<string> id, RegisteredDomainState? state = null, CustomResourceOptions? options = null)
        {
            return new RegisteredDomain(name, id, state, options);
        }
    }

    public sealed class RegisteredDomainArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether the domain should be set to auto-renew (default: `false`)
        /// </summary>
        [Input("autoRenewEnabled")]
        public Input<bool>? AutoRenewEnabled { get; set; }

        /// <summary>
        /// The ID of the contact to be used for the domain registration. The contact ID can be changed after the domain has been registered. The change will result in a new registrant change this may result in a [60-day lock](https://support.dnsimple.com/articles/icann-60-day-lock-registrant-change/).
        /// </summary>
        [Input("contactId", required: true)]
        public Input<int> ContactId { get; set; } = null!;

        /// <summary>
        /// Whether the domain should have DNSSEC enabled (default: `false`)
        /// </summary>
        [Input("dnssecEnabled")]
        public Input<bool>? DnssecEnabled { get; set; }

        [Input("extendedAttributes")]
        private InputMap<string>? _extendedAttributes;

        /// <summary>
        /// A map of extended attributes to be set for the domain registration. To see if there are any required extended attributes for any TLD use our [Lists the TLD Extended Attributes API](https://developer.dnsimple.com/v2/tlds/#getTldExtendedAttributes). The values provided in the `extended_attributes` will also be sent when a registrant change is initiated as part of changing the `contact_id`.
        /// </summary>
        public InputMap<string> ExtendedAttributes
        {
            get => _extendedAttributes ?? (_extendedAttributes = new InputMap<string>());
            set => _extendedAttributes = value;
        }

        /// <summary>
        /// The domain name to be registered
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The premium price for the domain registration. This is only required if the domain is a premium domain. You can use our [Check domain API](https://developer.dnsimple.com/v2/registrar/#checkDomain) to check if a domain is premium. And [Retrieve domain prices API](https://developer.dnsimple.com/v2/registrar/#getDomainPrices) to retrieve the premium price for a domain.
        /// </summary>
        [Input("premiumPrice")]
        public Input<string>? PremiumPrice { get; set; }

        /// <summary>
        /// (see below for nested schema)
        /// 
        /// # Attributes Reference
        /// </summary>
        [Input("timeouts")]
        public Input<Inputs.RegisteredDomainTimeoutsArgs>? Timeouts { get; set; }

        /// <summary>
        /// Whether the domain transfer lock protection is enabled (default: `true`)
        /// </summary>
        [Input("transferLockEnabled")]
        public Input<bool>? TransferLockEnabled { get; set; }

        /// <summary>
        /// Whether the domain should have WhoIs privacy enabled (default: `false`)
        /// </summary>
        [Input("whoisPrivacyEnabled")]
        public Input<bool>? WhoisPrivacyEnabled { get; set; }

        public RegisteredDomainArgs()
        {
        }
        public static new RegisteredDomainArgs Empty => new RegisteredDomainArgs();
    }

    public sealed class RegisteredDomainState : global::Pulumi.ResourceArgs
    {
        [Input("accountId")]
        public Input<int>? AccountId { get; set; }

        /// <summary>
        /// Whether the domain should be set to auto-renew (default: `false`)
        /// </summary>
        [Input("autoRenewEnabled")]
        public Input<bool>? AutoRenewEnabled { get; set; }

        /// <summary>
        /// The ID of the contact to be used for the domain registration. The contact ID can be changed after the domain has been registered. The change will result in a new registrant change this may result in a [60-day lock](https://support.dnsimple.com/articles/icann-60-day-lock-registrant-change/).
        /// </summary>
        [Input("contactId")]
        public Input<int>? ContactId { get; set; }

        /// <summary>
        /// Whether the domain should have DNSSEC enabled (default: `false`)
        /// </summary>
        [Input("dnssecEnabled")]
        public Input<bool>? DnssecEnabled { get; set; }

        /// <summary>
        /// The domain registration details. (see below for nested schema)
        /// 
        /// &lt;a id="nestedblock--timeouts"&gt;&lt;/a&gt;
        /// </summary>
        [Input("domainRegistration")]
        public Input<Inputs.RegisteredDomainDomainRegistrationGetArgs>? DomainRegistration { get; set; }

        [Input("expiresAt")]
        public Input<string>? ExpiresAt { get; set; }

        [Input("extendedAttributes")]
        private InputMap<string>? _extendedAttributes;

        /// <summary>
        /// A map of extended attributes to be set for the domain registration. To see if there are any required extended attributes for any TLD use our [Lists the TLD Extended Attributes API](https://developer.dnsimple.com/v2/tlds/#getTldExtendedAttributes). The values provided in the `extended_attributes` will also be sent when a registrant change is initiated as part of changing the `contact_id`.
        /// </summary>
        public InputMap<string> ExtendedAttributes
        {
            get => _extendedAttributes ?? (_extendedAttributes = new InputMap<string>());
            set => _extendedAttributes = value;
        }

        /// <summary>
        /// The domain name to be registered
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The premium price for the domain registration. This is only required if the domain is a premium domain. You can use our [Check domain API](https://developer.dnsimple.com/v2/registrar/#checkDomain) to check if a domain is premium. And [Retrieve domain prices API](https://developer.dnsimple.com/v2/registrar/#getDomainPrices) to retrieve the premium price for a domain.
        /// </summary>
        [Input("premiumPrice")]
        public Input<string>? PremiumPrice { get; set; }

        /// <summary>
        /// The registrant change details.
        /// </summary>
        [Input("registrantChange")]
        public Input<Inputs.RegisteredDomainRegistrantChangeGetArgs>? RegistrantChange { get; set; }

        /// <summary>
        /// The state of the domain.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// (see below for nested schema)
        /// 
        /// # Attributes Reference
        /// </summary>
        [Input("timeouts")]
        public Input<Inputs.RegisteredDomainTimeoutsGetArgs>? Timeouts { get; set; }

        /// <summary>
        /// Whether the domain transfer lock protection is enabled (default: `true`)
        /// </summary>
        [Input("transferLockEnabled")]
        public Input<bool>? TransferLockEnabled { get; set; }

        /// <summary>
        /// The domain name in Unicode format.
        /// </summary>
        [Input("unicodeName")]
        public Input<string>? UnicodeName { get; set; }

        /// <summary>
        /// Whether the domain should have WhoIs privacy enabled (default: `false`)
        /// </summary>
        [Input("whoisPrivacyEnabled")]
        public Input<bool>? WhoisPrivacyEnabled { get; set; }

        public RegisteredDomainState()
        {
        }
        public static new RegisteredDomainState Empty => new RegisteredDomainState();
    }
}
