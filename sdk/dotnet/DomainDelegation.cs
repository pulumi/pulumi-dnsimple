// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DNSimple
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using DNSimple = Pulumi.DNSimple;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create a domain delegation
    ///     var foobar = new DNSimple.DomainDelegation("foobar", new()
    ///     {
    ///         Domain = dnsimple.Domain,
    ///         NameServers = new[]
    ///         {
    ///             "ns1.example.org",
    ///             "ns2.example.com",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// DNSimple domain delegations can be imported using the domain name.
    /// 
    /// **Importing domain delegation for example.com**
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import dnsimple:index/domainDelegation:DomainDelegation resource_name example.com
    /// ```
    /// </summary>
    [DNSimpleResourceType("dnsimple:index/domainDelegation:DomainDelegation")]
    public partial class DomainDelegation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The domain name.
        /// </summary>
        [Output("domain")]
        public Output<string> Domain { get; private set; } = null!;

        /// <summary>
        /// The list of name servers to delegate to.
        /// 
        /// # Attributes Reference
        /// </summary>
        [Output("nameServers")]
        public Output<ImmutableArray<string>> NameServers { get; private set; } = null!;


        /// <summary>
        /// Create a DomainDelegation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DomainDelegation(string name, DomainDelegationArgs args, CustomResourceOptions? options = null)
            : base("dnsimple:index/domainDelegation:DomainDelegation", name, args ?? new DomainDelegationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DomainDelegation(string name, Input<string> id, DomainDelegationState? state = null, CustomResourceOptions? options = null)
            : base("dnsimple:index/domainDelegation:DomainDelegation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DomainDelegation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DomainDelegation Get(string name, Input<string> id, DomainDelegationState? state = null, CustomResourceOptions? options = null)
        {
            return new DomainDelegation(name, id, state, options);
        }
    }

    public sealed class DomainDelegationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The domain name.
        /// </summary>
        [Input("domain", required: true)]
        public Input<string> Domain { get; set; } = null!;

        [Input("nameServers", required: true)]
        private InputList<string>? _nameServers;

        /// <summary>
        /// The list of name servers to delegate to.
        /// 
        /// # Attributes Reference
        /// </summary>
        public InputList<string> NameServers
        {
            get => _nameServers ?? (_nameServers = new InputList<string>());
            set => _nameServers = value;
        }

        public DomainDelegationArgs()
        {
        }
        public static new DomainDelegationArgs Empty => new DomainDelegationArgs();
    }

    public sealed class DomainDelegationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The domain name.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        [Input("nameServers")]
        private InputList<string>? _nameServers;

        /// <summary>
        /// The list of name servers to delegate to.
        /// 
        /// # Attributes Reference
        /// </summary>
        public InputList<string> NameServers
        {
            get => _nameServers ?? (_nameServers = new InputList<string>());
            set => _nameServers = value;
        }

        public DomainDelegationState()
        {
        }
        public static new DomainDelegationState Empty => new DomainDelegationState();
    }
}
