// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DNSimple
{
    /// <summary>
    /// Provides a DNSimple domain resource.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using DNSimple = Pulumi.DNSimple;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create a domain
    ///     var foobar = new DNSimple.Domain("foobar", new()
    ///     {
    ///         Name = dnsimple.Domain,
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// DNSimple domains can be imported using their numeric record ID.
    /// 
    /// ```sh
    /// $ pulumi import dnsimple:index/domain:Domain resource_name 5678
    /// ```
    /// 
    /// The record ID can be found within [DNSimple Domains API](https://developer.dnsimple.com/v2/domains/#listDomains). Check out [Authentication](https://developer.dnsimple.com/v2/#authentication) in API Overview for available options.
    /// 
    /// $ curl -u 'EMAIL:PASSWORD' https://api.dnsimple.com/v2/1234/domains?name_like=example.com | jq
    /// 
    /// {
    /// 
    ///   "data": [
    /// 
    ///     {
    ///     
    ///       "id": 5678,
    ///     
    ///       "account_id": 1234,
    ///     
    ///       "registrant_id": null,
    ///     
    ///       "name": "example.com",
    ///     
    ///       "unicode_name": "example.com",
    ///     
    ///       "state": "hosted",
    ///     
    ///       "auto_renew": false,
    ///     
    ///       "private_whois": false,
    ///     
    ///       "expires_on": null,
    ///     
    ///       "expires_at": null,
    ///     
    ///       "created_at": "2021-10-01T00:00:00Z",
    ///     
    ///       "updated_at": "2021-10-01T00:00:00Z"
    ///     
    ///     }
    /// 
    ///   ],
    /// 
    ///   "pagination": {
    /// 
    ///     "current_page": 1,
    ///     
    ///     "per_page": 30,
    ///     
    ///     "total_entries": 1,
    ///     
    ///     "total_pages": 1
    /// 
    ///   }
    /// 
    /// }
    /// </summary>
    [DNSimpleResourceType("dnsimple:index/domain:Domain")]
    public partial class Domain : global::Pulumi.CustomResource
    {
        [Output("accountId")]
        public Output<int> AccountId { get; private set; } = null!;

        [Output("autoRenew")]
        public Output<bool> AutoRenew { get; private set; } = null!;

        /// <summary>
        /// The domain name to be created
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("privateWhois")]
        public Output<bool> PrivateWhois { get; private set; } = null!;

        [Output("registrantId")]
        public Output<int> RegistrantId { get; private set; } = null!;

        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        [Output("unicodeName")]
        public Output<string> UnicodeName { get; private set; } = null!;


        /// <summary>
        /// Create a Domain resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Domain(string name, DomainArgs args, CustomResourceOptions? options = null)
            : base("dnsimple:index/domain:Domain", name, args ?? new DomainArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Domain(string name, Input<string> id, DomainState? state = null, CustomResourceOptions? options = null)
            : base("dnsimple:index/domain:Domain", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Domain resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Domain Get(string name, Input<string> id, DomainState? state = null, CustomResourceOptions? options = null)
        {
            return new Domain(name, id, state, options);
        }
    }

    public sealed class DomainArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The domain name to be created
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public DomainArgs()
        {
        }
        public static new DomainArgs Empty => new DomainArgs();
    }

    public sealed class DomainState : global::Pulumi.ResourceArgs
    {
        [Input("accountId")]
        public Input<int>? AccountId { get; set; }

        [Input("autoRenew")]
        public Input<bool>? AutoRenew { get; set; }

        /// <summary>
        /// The domain name to be created
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("privateWhois")]
        public Input<bool>? PrivateWhois { get; set; }

        [Input("registrantId")]
        public Input<int>? RegistrantId { get; set; }

        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("unicodeName")]
        public Input<string>? UnicodeName { get; set; }

        public DomainState()
        {
        }
        public static new DomainState Empty => new DomainState();
    }
}
