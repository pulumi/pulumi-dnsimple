// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DNSimple
{
    /// <summary>
    /// Provides a DNSimple email forward resource.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using DNSimple = Pulumi.DNSimple;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Add an email forwarding rule to the domain
    ///     var foobar = new DNSimple.EmailForward("foobar", new()
    ///     {
    ///         AliasName = "sales",
    ///         DestinationEmail = "jane.doe@example.com",
    ///         Domain = @var.Dnsimple_domain,
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// </summary>
    [DNSimpleResourceType("dnsimple:index/emailForward:EmailForward")]
    public partial class EmailForward : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The source email address on the domain
        /// </summary>
        [Output("aliasEmail")]
        public Output<string> AliasEmail { get; private set; } = null!;

        /// <summary>
        /// The name part (the part before the @) of the source email address on the domain
        /// </summary>
        [Output("aliasName")]
        public Output<string> AliasName { get; private set; } = null!;

        /// <summary>
        /// The destination email address on another domain
        /// </summary>
        [Output("destinationEmail")]
        public Output<string> DestinationEmail { get; private set; } = null!;

        /// <summary>
        /// The domain to add the email forwarding rule to
        /// </summary>
        [Output("domain")]
        public Output<string> Domain { get; private set; } = null!;


        /// <summary>
        /// Create a EmailForward resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EmailForward(string name, EmailForwardArgs args, CustomResourceOptions? options = null)
            : base("dnsimple:index/emailForward:EmailForward", name, args ?? new EmailForwardArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EmailForward(string name, Input<string> id, EmailForwardState? state = null, CustomResourceOptions? options = null)
            : base("dnsimple:index/emailForward:EmailForward", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EmailForward resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EmailForward Get(string name, Input<string> id, EmailForwardState? state = null, CustomResourceOptions? options = null)
        {
            return new EmailForward(name, id, state, options);
        }
    }

    public sealed class EmailForwardArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name part (the part before the @) of the source email address on the domain
        /// </summary>
        [Input("aliasName", required: true)]
        public Input<string> AliasName { get; set; } = null!;

        /// <summary>
        /// The destination email address on another domain
        /// </summary>
        [Input("destinationEmail", required: true)]
        public Input<string> DestinationEmail { get; set; } = null!;

        /// <summary>
        /// The domain to add the email forwarding rule to
        /// </summary>
        [Input("domain", required: true)]
        public Input<string> Domain { get; set; } = null!;

        public EmailForwardArgs()
        {
        }
        public static new EmailForwardArgs Empty => new EmailForwardArgs();
    }

    public sealed class EmailForwardState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The source email address on the domain
        /// </summary>
        [Input("aliasEmail")]
        public Input<string>? AliasEmail { get; set; }

        /// <summary>
        /// The name part (the part before the @) of the source email address on the domain
        /// </summary>
        [Input("aliasName")]
        public Input<string>? AliasName { get; set; }

        /// <summary>
        /// The destination email address on another domain
        /// </summary>
        [Input("destinationEmail")]
        public Input<string>? DestinationEmail { get; set; }

        /// <summary>
        /// The domain to add the email forwarding rule to
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        public EmailForwardState()
        {
        }
        public static new EmailForwardState Empty => new EmailForwardState();
    }
}
