# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetCertificateResult',
    'AwaitableGetCertificateResult',
    'get_certificate',
    'get_certificate_output',
]

@pulumi.output_type
class GetCertificateResult:
    """
    A collection of values returned by getCertificate.
    """
    def __init__(__self__, certificate_chains=None, certificate_id=None, domain=None, id=None, private_key=None, root_certificate=None, server_certificate=None):
        if certificate_chains and not isinstance(certificate_chains, list):
            raise TypeError("Expected argument 'certificate_chains' to be a list")
        pulumi.set(__self__, "certificate_chains", certificate_chains)
        if certificate_id and not isinstance(certificate_id, str):
            raise TypeError("Expected argument 'certificate_id' to be a str")
        pulumi.set(__self__, "certificate_id", certificate_id)
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if private_key and not isinstance(private_key, str):
            raise TypeError("Expected argument 'private_key' to be a str")
        pulumi.set(__self__, "private_key", private_key)
        if root_certificate and not isinstance(root_certificate, str):
            raise TypeError("Expected argument 'root_certificate' to be a str")
        pulumi.set(__self__, "root_certificate", root_certificate)
        if server_certificate and not isinstance(server_certificate, str):
            raise TypeError("Expected argument 'server_certificate' to be a str")
        pulumi.set(__self__, "server_certificate", server_certificate)

    @property
    @pulumi.getter(name="certificateChains")
    def certificate_chains(self) -> Sequence[str]:
        """
        A list of certificates that make up the chain
        """
        return pulumi.get(self, "certificate_chains")

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> str:
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> str:
        """
        The corresponding Private Key for the SSL Certificate
        """
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="rootCertificate")
    def root_certificate(self) -> str:
        """
        The Root Certificate of the issuing CA
        """
        return pulumi.get(self, "root_certificate")

    @property
    @pulumi.getter(name="serverCertificate")
    def server_certificate(self) -> str:
        """
        The SSL Certificate
        """
        return pulumi.get(self, "server_certificate")


class AwaitableGetCertificateResult(GetCertificateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCertificateResult(
            certificate_chains=self.certificate_chains,
            certificate_id=self.certificate_id,
            domain=self.domain,
            id=self.id,
            private_key=self.private_key,
            root_certificate=self.root_certificate,
            server_certificate=self.server_certificate)


def get_certificate(certificate_id: Optional[str] = None,
                    domain: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCertificateResult:
    """
    Provides a DNSimple certificate data source.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_dnsimple as dnsimple

    foobar = dnsimple.get_certificate(certificate_id=var["dnsimple_certificate_id"],
        domain=var["dnsimple_domain"])
    ```


    :param str certificate_id: The ID of the SSL Certificate
    :param str domain: The domain of the SSL Certificate
    """
    __args__ = dict()
    __args__['certificateId'] = certificate_id
    __args__['domain'] = domain
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('dnsimple:index/getCertificate:getCertificate', __args__, opts=opts, typ=GetCertificateResult).value

    return AwaitableGetCertificateResult(
        certificate_chains=pulumi.get(__ret__, 'certificate_chains'),
        certificate_id=pulumi.get(__ret__, 'certificate_id'),
        domain=pulumi.get(__ret__, 'domain'),
        id=pulumi.get(__ret__, 'id'),
        private_key=pulumi.get(__ret__, 'private_key'),
        root_certificate=pulumi.get(__ret__, 'root_certificate'),
        server_certificate=pulumi.get(__ret__, 'server_certificate'))


@_utilities.lift_output_func(get_certificate)
def get_certificate_output(certificate_id: Optional[pulumi.Input[str]] = None,
                           domain: Optional[pulumi.Input[str]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCertificateResult]:
    """
    Provides a DNSimple certificate data source.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_dnsimple as dnsimple

    foobar = dnsimple.get_certificate(certificate_id=var["dnsimple_certificate_id"],
        domain=var["dnsimple_domain"])
    ```


    :param str certificate_id: The ID of the SSL Certificate
    :param str domain: The domain of the SSL Certificate
    """
    ...
