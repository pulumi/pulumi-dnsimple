// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dnsimple

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-dnsimple/sdk/v4/go/dnsimple/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-dnsimple/sdk/v4/go/dnsimple"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create a domain delegation
//			_, err := dnsimple.NewDomainDelegation(ctx, "foobar", &dnsimple.DomainDelegationArgs{
//				Domain: pulumi.Any(dnsimple.Domain),
//				NameServers: pulumi.StringArray{
//					pulumi.String("ns1.example.org"),
//					pulumi.String("ns2.example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// DNSimple domain delegations can be imported using the domain name.
//
// **Importing domain delegation for example.com**
//
// bash
//
// ```sh
// $ pulumi import dnsimple:index/domainDelegation:DomainDelegation resource_name example.com
// ```
type DomainDelegation struct {
	pulumi.CustomResourceState

	// The domain name.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// The list of name servers to delegate to.
	//
	// # Attributes Reference
	NameServers pulumi.StringArrayOutput `pulumi:"nameServers"`
}

// NewDomainDelegation registers a new resource with the given unique name, arguments, and options.
func NewDomainDelegation(ctx *pulumi.Context,
	name string, args *DomainDelegationArgs, opts ...pulumi.ResourceOption) (*DomainDelegation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.NameServers == nil {
		return nil, errors.New("invalid value for required argument 'NameServers'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DomainDelegation
	err := ctx.RegisterResource("dnsimple:index/domainDelegation:DomainDelegation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainDelegation gets an existing DomainDelegation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainDelegation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainDelegationState, opts ...pulumi.ResourceOption) (*DomainDelegation, error) {
	var resource DomainDelegation
	err := ctx.ReadResource("dnsimple:index/domainDelegation:DomainDelegation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainDelegation resources.
type domainDelegationState struct {
	// The domain name.
	Domain *string `pulumi:"domain"`
	// The list of name servers to delegate to.
	//
	// # Attributes Reference
	NameServers []string `pulumi:"nameServers"`
}

type DomainDelegationState struct {
	// The domain name.
	Domain pulumi.StringPtrInput
	// The list of name servers to delegate to.
	//
	// # Attributes Reference
	NameServers pulumi.StringArrayInput
}

func (DomainDelegationState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainDelegationState)(nil)).Elem()
}

type domainDelegationArgs struct {
	// The domain name.
	Domain string `pulumi:"domain"`
	// The list of name servers to delegate to.
	//
	// # Attributes Reference
	NameServers []string `pulumi:"nameServers"`
}

// The set of arguments for constructing a DomainDelegation resource.
type DomainDelegationArgs struct {
	// The domain name.
	Domain pulumi.StringInput
	// The list of name servers to delegate to.
	//
	// # Attributes Reference
	NameServers pulumi.StringArrayInput
}

func (DomainDelegationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainDelegationArgs)(nil)).Elem()
}

type DomainDelegationInput interface {
	pulumi.Input

	ToDomainDelegationOutput() DomainDelegationOutput
	ToDomainDelegationOutputWithContext(ctx context.Context) DomainDelegationOutput
}

func (*DomainDelegation) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainDelegation)(nil)).Elem()
}

func (i *DomainDelegation) ToDomainDelegationOutput() DomainDelegationOutput {
	return i.ToDomainDelegationOutputWithContext(context.Background())
}

func (i *DomainDelegation) ToDomainDelegationOutputWithContext(ctx context.Context) DomainDelegationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainDelegationOutput)
}

// DomainDelegationArrayInput is an input type that accepts DomainDelegationArray and DomainDelegationArrayOutput values.
// You can construct a concrete instance of `DomainDelegationArrayInput` via:
//
//	DomainDelegationArray{ DomainDelegationArgs{...} }
type DomainDelegationArrayInput interface {
	pulumi.Input

	ToDomainDelegationArrayOutput() DomainDelegationArrayOutput
	ToDomainDelegationArrayOutputWithContext(context.Context) DomainDelegationArrayOutput
}

type DomainDelegationArray []DomainDelegationInput

func (DomainDelegationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainDelegation)(nil)).Elem()
}

func (i DomainDelegationArray) ToDomainDelegationArrayOutput() DomainDelegationArrayOutput {
	return i.ToDomainDelegationArrayOutputWithContext(context.Background())
}

func (i DomainDelegationArray) ToDomainDelegationArrayOutputWithContext(ctx context.Context) DomainDelegationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainDelegationArrayOutput)
}

// DomainDelegationMapInput is an input type that accepts DomainDelegationMap and DomainDelegationMapOutput values.
// You can construct a concrete instance of `DomainDelegationMapInput` via:
//
//	DomainDelegationMap{ "key": DomainDelegationArgs{...} }
type DomainDelegationMapInput interface {
	pulumi.Input

	ToDomainDelegationMapOutput() DomainDelegationMapOutput
	ToDomainDelegationMapOutputWithContext(context.Context) DomainDelegationMapOutput
}

type DomainDelegationMap map[string]DomainDelegationInput

func (DomainDelegationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainDelegation)(nil)).Elem()
}

func (i DomainDelegationMap) ToDomainDelegationMapOutput() DomainDelegationMapOutput {
	return i.ToDomainDelegationMapOutputWithContext(context.Background())
}

func (i DomainDelegationMap) ToDomainDelegationMapOutputWithContext(ctx context.Context) DomainDelegationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainDelegationMapOutput)
}

type DomainDelegationOutput struct{ *pulumi.OutputState }

func (DomainDelegationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainDelegation)(nil)).Elem()
}

func (o DomainDelegationOutput) ToDomainDelegationOutput() DomainDelegationOutput {
	return o
}

func (o DomainDelegationOutput) ToDomainDelegationOutputWithContext(ctx context.Context) DomainDelegationOutput {
	return o
}

// The domain name.
func (o DomainDelegationOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainDelegation) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// The list of name servers to delegate to.
//
// # Attributes Reference
func (o DomainDelegationOutput) NameServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DomainDelegation) pulumi.StringArrayOutput { return v.NameServers }).(pulumi.StringArrayOutput)
}

type DomainDelegationArrayOutput struct{ *pulumi.OutputState }

func (DomainDelegationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainDelegation)(nil)).Elem()
}

func (o DomainDelegationArrayOutput) ToDomainDelegationArrayOutput() DomainDelegationArrayOutput {
	return o
}

func (o DomainDelegationArrayOutput) ToDomainDelegationArrayOutputWithContext(ctx context.Context) DomainDelegationArrayOutput {
	return o
}

func (o DomainDelegationArrayOutput) Index(i pulumi.IntInput) DomainDelegationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DomainDelegation {
		return vs[0].([]*DomainDelegation)[vs[1].(int)]
	}).(DomainDelegationOutput)
}

type DomainDelegationMapOutput struct{ *pulumi.OutputState }

func (DomainDelegationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainDelegation)(nil)).Elem()
}

func (o DomainDelegationMapOutput) ToDomainDelegationMapOutput() DomainDelegationMapOutput {
	return o
}

func (o DomainDelegationMapOutput) ToDomainDelegationMapOutputWithContext(ctx context.Context) DomainDelegationMapOutput {
	return o
}

func (o DomainDelegationMapOutput) MapIndex(k pulumi.StringInput) DomainDelegationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DomainDelegation {
		return vs[0].(map[string]*DomainDelegation)[vs[1].(string)]
	}).(DomainDelegationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainDelegationInput)(nil)).Elem(), &DomainDelegation{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainDelegationArrayInput)(nil)).Elem(), DomainDelegationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainDelegationMapInput)(nil)).Elem(), DomainDelegationMap{})
	pulumi.RegisterOutputType(DomainDelegationOutput{})
	pulumi.RegisterOutputType(DomainDelegationArrayOutput{})
	pulumi.RegisterOutputType(DomainDelegationMapOutput{})
}
