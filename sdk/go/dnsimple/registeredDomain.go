// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dnsimple

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-dnsimple/sdk/v4/go/dnsimple/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a DNSimple registered domain resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-dnsimple/sdk/v4/go/dnsimple"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			aliceMain, err := dnsimple.NewContact(ctx, "alice_main", &dnsimple.ContactArgs{
//				Label:            pulumi.String("Alice Appleseed"),
//				FirstName:        pulumi.String("Alice Main"),
//				LastName:         pulumi.String("Appleseed"),
//				OrganizationName: pulumi.String("Contoso"),
//				JobTitle:         pulumi.String("Manager"),
//				Address1:         pulumi.String("Level 1, 2 Main St"),
//				Address2:         pulumi.String("Marsfield"),
//				City:             pulumi.String("San Francisco"),
//				StateProvince:    pulumi.String("California"),
//				PostalCode:       pulumi.String("90210"),
//				Country:          pulumi.String("US"),
//				Phone:            pulumi.String("+1401239523"),
//				Fax:              pulumi.String("+1849491024"),
//				Email:            pulumi.String("apple@contoso.com"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dnsimple.NewRegisteredDomain(ctx, "appleseed_bio", &dnsimple.RegisteredDomainArgs{
//				Name:                pulumi.String("appleseed.bio"),
//				ContactId:           aliceMain.ID(),
//				AutoRenewEnabled:    pulumi.Bool(true),
//				TransferLockEnabled: pulumi.Bool(true),
//				WhoisPrivacyEnabled: pulumi.Bool(true),
//				DnssecEnabled:       pulumi.Bool(false),
//				ExtendedAttributes: pulumi.StringMap{
//					"bio_agree": pulumi.String("I Agree"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// DNSimple registered domains can be imported using their domain name and **optionally** with domain registration ID.
//
// **Importing registered domain example.com**
//
// bash
//
// ```sh
// $ pulumi import dnsimple:index/registeredDomain:RegisteredDomain resource_name example.com
// ```
//
// **Importing registered domain example.com with domain registration ID 1234**
//
// bash
//
// ```sh
// $ pulumi import dnsimple:index/registeredDomain:RegisteredDomain resource_name example.com_1234
// ```
type RegisteredDomain struct {
	pulumi.CustomResourceState

	AccountId pulumi.IntOutput `pulumi:"accountId"`
	// Whether the domain should be set to auto-renew (default: `false`)
	AutoRenewEnabled pulumi.BoolOutput `pulumi:"autoRenewEnabled"`
	// The ID of the contact to be used for the domain registration. The contact ID can be changed after the domain has been registered. The change will result in a new registrant change this may result in a [60-day lock](https://support.dnsimple.com/articles/icann-60-day-lock-registrant-change/).
	ContactId pulumi.IntOutput `pulumi:"contactId"`
	// Whether the domain should have DNSSEC enabled (default: `false`)
	DnssecEnabled pulumi.BoolOutput `pulumi:"dnssecEnabled"`
	// The domain registration details. (see below for nested schema)
	//
	// <a id="nestedblock--timeouts"></a>
	DomainRegistration RegisteredDomainDomainRegistrationOutput `pulumi:"domainRegistration"`
	ExpiresAt          pulumi.StringOutput                      `pulumi:"expiresAt"`
	// A map of extended attributes to be set for the domain registration. To see if there are any required extended attributes for any TLD use our [Lists the TLD Extended Attributes API](https://developer.dnsimple.com/v2/tlds/#getTldExtendedAttributes). The values provided in the `extendedAttributes` will also be sent when a registrant change is initiated as part of changing the `contactId`.
	ExtendedAttributes pulumi.StringMapOutput `pulumi:"extendedAttributes"`
	// The domain name to be registered
	Name pulumi.StringOutput `pulumi:"name"`
	// The premium price for the domain registration. This is only required if the domain is a premium domain. You can use our [Check domain API](https://developer.dnsimple.com/v2/registrar/#checkDomain) to check if a domain is premium. And [Retrieve domain prices API](https://developer.dnsimple.com/v2/registrar/#getDomainPrices) to retrieve the premium price for a domain.
	PremiumPrice pulumi.StringPtrOutput `pulumi:"premiumPrice"`
	// The registrant change details.
	RegistrantChange RegisteredDomainRegistrantChangeOutput `pulumi:"registrantChange"`
	// The state of the domain.
	State pulumi.StringOutput `pulumi:"state"`
	// (see below for nested schema)
	//
	// # Attributes Reference
	Timeouts RegisteredDomainTimeoutsPtrOutput `pulumi:"timeouts"`
	// Whether the domain transfer lock protection is enabled (default: `true`)
	TransferLockEnabled pulumi.BoolOutput `pulumi:"transferLockEnabled"`
	// The domain name in Unicode format.
	UnicodeName pulumi.StringOutput `pulumi:"unicodeName"`
	// Whether the domain should have WhoIs privacy enabled (default: `false`)
	WhoisPrivacyEnabled pulumi.BoolOutput `pulumi:"whoisPrivacyEnabled"`
}

// NewRegisteredDomain registers a new resource with the given unique name, arguments, and options.
func NewRegisteredDomain(ctx *pulumi.Context,
	name string, args *RegisteredDomainArgs, opts ...pulumi.ResourceOption) (*RegisteredDomain, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContactId == nil {
		return nil, errors.New("invalid value for required argument 'ContactId'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RegisteredDomain
	err := ctx.RegisterResource("dnsimple:index/registeredDomain:RegisteredDomain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegisteredDomain gets an existing RegisteredDomain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegisteredDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegisteredDomainState, opts ...pulumi.ResourceOption) (*RegisteredDomain, error) {
	var resource RegisteredDomain
	err := ctx.ReadResource("dnsimple:index/registeredDomain:RegisteredDomain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegisteredDomain resources.
type registeredDomainState struct {
	AccountId *int `pulumi:"accountId"`
	// Whether the domain should be set to auto-renew (default: `false`)
	AutoRenewEnabled *bool `pulumi:"autoRenewEnabled"`
	// The ID of the contact to be used for the domain registration. The contact ID can be changed after the domain has been registered. The change will result in a new registrant change this may result in a [60-day lock](https://support.dnsimple.com/articles/icann-60-day-lock-registrant-change/).
	ContactId *int `pulumi:"contactId"`
	// Whether the domain should have DNSSEC enabled (default: `false`)
	DnssecEnabled *bool `pulumi:"dnssecEnabled"`
	// The domain registration details. (see below for nested schema)
	//
	// <a id="nestedblock--timeouts"></a>
	DomainRegistration *RegisteredDomainDomainRegistration `pulumi:"domainRegistration"`
	ExpiresAt          *string                             `pulumi:"expiresAt"`
	// A map of extended attributes to be set for the domain registration. To see if there are any required extended attributes for any TLD use our [Lists the TLD Extended Attributes API](https://developer.dnsimple.com/v2/tlds/#getTldExtendedAttributes). The values provided in the `extendedAttributes` will also be sent when a registrant change is initiated as part of changing the `contactId`.
	ExtendedAttributes map[string]string `pulumi:"extendedAttributes"`
	// The domain name to be registered
	Name *string `pulumi:"name"`
	// The premium price for the domain registration. This is only required if the domain is a premium domain. You can use our [Check domain API](https://developer.dnsimple.com/v2/registrar/#checkDomain) to check if a domain is premium. And [Retrieve domain prices API](https://developer.dnsimple.com/v2/registrar/#getDomainPrices) to retrieve the premium price for a domain.
	PremiumPrice *string `pulumi:"premiumPrice"`
	// The registrant change details.
	RegistrantChange *RegisteredDomainRegistrantChange `pulumi:"registrantChange"`
	// The state of the domain.
	State *string `pulumi:"state"`
	// (see below for nested schema)
	//
	// # Attributes Reference
	Timeouts *RegisteredDomainTimeouts `pulumi:"timeouts"`
	// Whether the domain transfer lock protection is enabled (default: `true`)
	TransferLockEnabled *bool `pulumi:"transferLockEnabled"`
	// The domain name in Unicode format.
	UnicodeName *string `pulumi:"unicodeName"`
	// Whether the domain should have WhoIs privacy enabled (default: `false`)
	WhoisPrivacyEnabled *bool `pulumi:"whoisPrivacyEnabled"`
}

type RegisteredDomainState struct {
	AccountId pulumi.IntPtrInput
	// Whether the domain should be set to auto-renew (default: `false`)
	AutoRenewEnabled pulumi.BoolPtrInput
	// The ID of the contact to be used for the domain registration. The contact ID can be changed after the domain has been registered. The change will result in a new registrant change this may result in a [60-day lock](https://support.dnsimple.com/articles/icann-60-day-lock-registrant-change/).
	ContactId pulumi.IntPtrInput
	// Whether the domain should have DNSSEC enabled (default: `false`)
	DnssecEnabled pulumi.BoolPtrInput
	// The domain registration details. (see below for nested schema)
	//
	// <a id="nestedblock--timeouts"></a>
	DomainRegistration RegisteredDomainDomainRegistrationPtrInput
	ExpiresAt          pulumi.StringPtrInput
	// A map of extended attributes to be set for the domain registration. To see if there are any required extended attributes for any TLD use our [Lists the TLD Extended Attributes API](https://developer.dnsimple.com/v2/tlds/#getTldExtendedAttributes). The values provided in the `extendedAttributes` will also be sent when a registrant change is initiated as part of changing the `contactId`.
	ExtendedAttributes pulumi.StringMapInput
	// The domain name to be registered
	Name pulumi.StringPtrInput
	// The premium price for the domain registration. This is only required if the domain is a premium domain. You can use our [Check domain API](https://developer.dnsimple.com/v2/registrar/#checkDomain) to check if a domain is premium. And [Retrieve domain prices API](https://developer.dnsimple.com/v2/registrar/#getDomainPrices) to retrieve the premium price for a domain.
	PremiumPrice pulumi.StringPtrInput
	// The registrant change details.
	RegistrantChange RegisteredDomainRegistrantChangePtrInput
	// The state of the domain.
	State pulumi.StringPtrInput
	// (see below for nested schema)
	//
	// # Attributes Reference
	Timeouts RegisteredDomainTimeoutsPtrInput
	// Whether the domain transfer lock protection is enabled (default: `true`)
	TransferLockEnabled pulumi.BoolPtrInput
	// The domain name in Unicode format.
	UnicodeName pulumi.StringPtrInput
	// Whether the domain should have WhoIs privacy enabled (default: `false`)
	WhoisPrivacyEnabled pulumi.BoolPtrInput
}

func (RegisteredDomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*registeredDomainState)(nil)).Elem()
}

type registeredDomainArgs struct {
	// Whether the domain should be set to auto-renew (default: `false`)
	AutoRenewEnabled *bool `pulumi:"autoRenewEnabled"`
	// The ID of the contact to be used for the domain registration. The contact ID can be changed after the domain has been registered. The change will result in a new registrant change this may result in a [60-day lock](https://support.dnsimple.com/articles/icann-60-day-lock-registrant-change/).
	ContactId int `pulumi:"contactId"`
	// Whether the domain should have DNSSEC enabled (default: `false`)
	DnssecEnabled *bool `pulumi:"dnssecEnabled"`
	// A map of extended attributes to be set for the domain registration. To see if there are any required extended attributes for any TLD use our [Lists the TLD Extended Attributes API](https://developer.dnsimple.com/v2/tlds/#getTldExtendedAttributes). The values provided in the `extendedAttributes` will also be sent when a registrant change is initiated as part of changing the `contactId`.
	ExtendedAttributes map[string]string `pulumi:"extendedAttributes"`
	// The domain name to be registered
	Name string `pulumi:"name"`
	// The premium price for the domain registration. This is only required if the domain is a premium domain. You can use our [Check domain API](https://developer.dnsimple.com/v2/registrar/#checkDomain) to check if a domain is premium. And [Retrieve domain prices API](https://developer.dnsimple.com/v2/registrar/#getDomainPrices) to retrieve the premium price for a domain.
	PremiumPrice *string `pulumi:"premiumPrice"`
	// (see below for nested schema)
	//
	// # Attributes Reference
	Timeouts *RegisteredDomainTimeouts `pulumi:"timeouts"`
	// Whether the domain transfer lock protection is enabled (default: `true`)
	TransferLockEnabled *bool `pulumi:"transferLockEnabled"`
	// Whether the domain should have WhoIs privacy enabled (default: `false`)
	WhoisPrivacyEnabled *bool `pulumi:"whoisPrivacyEnabled"`
}

// The set of arguments for constructing a RegisteredDomain resource.
type RegisteredDomainArgs struct {
	// Whether the domain should be set to auto-renew (default: `false`)
	AutoRenewEnabled pulumi.BoolPtrInput
	// The ID of the contact to be used for the domain registration. The contact ID can be changed after the domain has been registered. The change will result in a new registrant change this may result in a [60-day lock](https://support.dnsimple.com/articles/icann-60-day-lock-registrant-change/).
	ContactId pulumi.IntInput
	// Whether the domain should have DNSSEC enabled (default: `false`)
	DnssecEnabled pulumi.BoolPtrInput
	// A map of extended attributes to be set for the domain registration. To see if there are any required extended attributes for any TLD use our [Lists the TLD Extended Attributes API](https://developer.dnsimple.com/v2/tlds/#getTldExtendedAttributes). The values provided in the `extendedAttributes` will also be sent when a registrant change is initiated as part of changing the `contactId`.
	ExtendedAttributes pulumi.StringMapInput
	// The domain name to be registered
	Name pulumi.StringInput
	// The premium price for the domain registration. This is only required if the domain is a premium domain. You can use our [Check domain API](https://developer.dnsimple.com/v2/registrar/#checkDomain) to check if a domain is premium. And [Retrieve domain prices API](https://developer.dnsimple.com/v2/registrar/#getDomainPrices) to retrieve the premium price for a domain.
	PremiumPrice pulumi.StringPtrInput
	// (see below for nested schema)
	//
	// # Attributes Reference
	Timeouts RegisteredDomainTimeoutsPtrInput
	// Whether the domain transfer lock protection is enabled (default: `true`)
	TransferLockEnabled pulumi.BoolPtrInput
	// Whether the domain should have WhoIs privacy enabled (default: `false`)
	WhoisPrivacyEnabled pulumi.BoolPtrInput
}

func (RegisteredDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*registeredDomainArgs)(nil)).Elem()
}

type RegisteredDomainInput interface {
	pulumi.Input

	ToRegisteredDomainOutput() RegisteredDomainOutput
	ToRegisteredDomainOutputWithContext(ctx context.Context) RegisteredDomainOutput
}

func (*RegisteredDomain) ElementType() reflect.Type {
	return reflect.TypeOf((**RegisteredDomain)(nil)).Elem()
}

func (i *RegisteredDomain) ToRegisteredDomainOutput() RegisteredDomainOutput {
	return i.ToRegisteredDomainOutputWithContext(context.Background())
}

func (i *RegisteredDomain) ToRegisteredDomainOutputWithContext(ctx context.Context) RegisteredDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegisteredDomainOutput)
}

// RegisteredDomainArrayInput is an input type that accepts RegisteredDomainArray and RegisteredDomainArrayOutput values.
// You can construct a concrete instance of `RegisteredDomainArrayInput` via:
//
//	RegisteredDomainArray{ RegisteredDomainArgs{...} }
type RegisteredDomainArrayInput interface {
	pulumi.Input

	ToRegisteredDomainArrayOutput() RegisteredDomainArrayOutput
	ToRegisteredDomainArrayOutputWithContext(context.Context) RegisteredDomainArrayOutput
}

type RegisteredDomainArray []RegisteredDomainInput

func (RegisteredDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegisteredDomain)(nil)).Elem()
}

func (i RegisteredDomainArray) ToRegisteredDomainArrayOutput() RegisteredDomainArrayOutput {
	return i.ToRegisteredDomainArrayOutputWithContext(context.Background())
}

func (i RegisteredDomainArray) ToRegisteredDomainArrayOutputWithContext(ctx context.Context) RegisteredDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegisteredDomainArrayOutput)
}

// RegisteredDomainMapInput is an input type that accepts RegisteredDomainMap and RegisteredDomainMapOutput values.
// You can construct a concrete instance of `RegisteredDomainMapInput` via:
//
//	RegisteredDomainMap{ "key": RegisteredDomainArgs{...} }
type RegisteredDomainMapInput interface {
	pulumi.Input

	ToRegisteredDomainMapOutput() RegisteredDomainMapOutput
	ToRegisteredDomainMapOutputWithContext(context.Context) RegisteredDomainMapOutput
}

type RegisteredDomainMap map[string]RegisteredDomainInput

func (RegisteredDomainMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegisteredDomain)(nil)).Elem()
}

func (i RegisteredDomainMap) ToRegisteredDomainMapOutput() RegisteredDomainMapOutput {
	return i.ToRegisteredDomainMapOutputWithContext(context.Background())
}

func (i RegisteredDomainMap) ToRegisteredDomainMapOutputWithContext(ctx context.Context) RegisteredDomainMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegisteredDomainMapOutput)
}

type RegisteredDomainOutput struct{ *pulumi.OutputState }

func (RegisteredDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegisteredDomain)(nil)).Elem()
}

func (o RegisteredDomainOutput) ToRegisteredDomainOutput() RegisteredDomainOutput {
	return o
}

func (o RegisteredDomainOutput) ToRegisteredDomainOutputWithContext(ctx context.Context) RegisteredDomainOutput {
	return o
}

func (o RegisteredDomainOutput) AccountId() pulumi.IntOutput {
	return o.ApplyT(func(v *RegisteredDomain) pulumi.IntOutput { return v.AccountId }).(pulumi.IntOutput)
}

// Whether the domain should be set to auto-renew (default: `false`)
func (o RegisteredDomainOutput) AutoRenewEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *RegisteredDomain) pulumi.BoolOutput { return v.AutoRenewEnabled }).(pulumi.BoolOutput)
}

// The ID of the contact to be used for the domain registration. The contact ID can be changed after the domain has been registered. The change will result in a new registrant change this may result in a [60-day lock](https://support.dnsimple.com/articles/icann-60-day-lock-registrant-change/).
func (o RegisteredDomainOutput) ContactId() pulumi.IntOutput {
	return o.ApplyT(func(v *RegisteredDomain) pulumi.IntOutput { return v.ContactId }).(pulumi.IntOutput)
}

// Whether the domain should have DNSSEC enabled (default: `false`)
func (o RegisteredDomainOutput) DnssecEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *RegisteredDomain) pulumi.BoolOutput { return v.DnssecEnabled }).(pulumi.BoolOutput)
}

// The domain registration details. (see below for nested schema)
//
// <a id="nestedblock--timeouts"></a>
func (o RegisteredDomainOutput) DomainRegistration() RegisteredDomainDomainRegistrationOutput {
	return o.ApplyT(func(v *RegisteredDomain) RegisteredDomainDomainRegistrationOutput { return v.DomainRegistration }).(RegisteredDomainDomainRegistrationOutput)
}

func (o RegisteredDomainOutput) ExpiresAt() pulumi.StringOutput {
	return o.ApplyT(func(v *RegisteredDomain) pulumi.StringOutput { return v.ExpiresAt }).(pulumi.StringOutput)
}

// A map of extended attributes to be set for the domain registration. To see if there are any required extended attributes for any TLD use our [Lists the TLD Extended Attributes API](https://developer.dnsimple.com/v2/tlds/#getTldExtendedAttributes). The values provided in the `extendedAttributes` will also be sent when a registrant change is initiated as part of changing the `contactId`.
func (o RegisteredDomainOutput) ExtendedAttributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RegisteredDomain) pulumi.StringMapOutput { return v.ExtendedAttributes }).(pulumi.StringMapOutput)
}

// The domain name to be registered
func (o RegisteredDomainOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RegisteredDomain) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The premium price for the domain registration. This is only required if the domain is a premium domain. You can use our [Check domain API](https://developer.dnsimple.com/v2/registrar/#checkDomain) to check if a domain is premium. And [Retrieve domain prices API](https://developer.dnsimple.com/v2/registrar/#getDomainPrices) to retrieve the premium price for a domain.
func (o RegisteredDomainOutput) PremiumPrice() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegisteredDomain) pulumi.StringPtrOutput { return v.PremiumPrice }).(pulumi.StringPtrOutput)
}

// The registrant change details.
func (o RegisteredDomainOutput) RegistrantChange() RegisteredDomainRegistrantChangeOutput {
	return o.ApplyT(func(v *RegisteredDomain) RegisteredDomainRegistrantChangeOutput { return v.RegistrantChange }).(RegisteredDomainRegistrantChangeOutput)
}

// The state of the domain.
func (o RegisteredDomainOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *RegisteredDomain) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// (see below for nested schema)
//
// # Attributes Reference
func (o RegisteredDomainOutput) Timeouts() RegisteredDomainTimeoutsPtrOutput {
	return o.ApplyT(func(v *RegisteredDomain) RegisteredDomainTimeoutsPtrOutput { return v.Timeouts }).(RegisteredDomainTimeoutsPtrOutput)
}

// Whether the domain transfer lock protection is enabled (default: `true`)
func (o RegisteredDomainOutput) TransferLockEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *RegisteredDomain) pulumi.BoolOutput { return v.TransferLockEnabled }).(pulumi.BoolOutput)
}

// The domain name in Unicode format.
func (o RegisteredDomainOutput) UnicodeName() pulumi.StringOutput {
	return o.ApplyT(func(v *RegisteredDomain) pulumi.StringOutput { return v.UnicodeName }).(pulumi.StringOutput)
}

// Whether the domain should have WhoIs privacy enabled (default: `false`)
func (o RegisteredDomainOutput) WhoisPrivacyEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *RegisteredDomain) pulumi.BoolOutput { return v.WhoisPrivacyEnabled }).(pulumi.BoolOutput)
}

type RegisteredDomainArrayOutput struct{ *pulumi.OutputState }

func (RegisteredDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegisteredDomain)(nil)).Elem()
}

func (o RegisteredDomainArrayOutput) ToRegisteredDomainArrayOutput() RegisteredDomainArrayOutput {
	return o
}

func (o RegisteredDomainArrayOutput) ToRegisteredDomainArrayOutputWithContext(ctx context.Context) RegisteredDomainArrayOutput {
	return o
}

func (o RegisteredDomainArrayOutput) Index(i pulumi.IntInput) RegisteredDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RegisteredDomain {
		return vs[0].([]*RegisteredDomain)[vs[1].(int)]
	}).(RegisteredDomainOutput)
}

type RegisteredDomainMapOutput struct{ *pulumi.OutputState }

func (RegisteredDomainMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegisteredDomain)(nil)).Elem()
}

func (o RegisteredDomainMapOutput) ToRegisteredDomainMapOutput() RegisteredDomainMapOutput {
	return o
}

func (o RegisteredDomainMapOutput) ToRegisteredDomainMapOutputWithContext(ctx context.Context) RegisteredDomainMapOutput {
	return o
}

func (o RegisteredDomainMapOutput) MapIndex(k pulumi.StringInput) RegisteredDomainOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RegisteredDomain {
		return vs[0].(map[string]*RegisteredDomain)[vs[1].(string)]
	}).(RegisteredDomainOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegisteredDomainInput)(nil)).Elem(), &RegisteredDomain{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegisteredDomainArrayInput)(nil)).Elem(), RegisteredDomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegisteredDomainMapInput)(nil)).Elem(), RegisteredDomainMap{})
	pulumi.RegisterOutputType(RegisteredDomainOutput{})
	pulumi.RegisterOutputType(RegisteredDomainArrayOutput{})
	pulumi.RegisterOutputType(RegisteredDomainMapOutput{})
}
