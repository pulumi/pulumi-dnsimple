// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package dnsimple

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a DNSimple record resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-dnsimple/sdk/v2/go/dnsimple"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := dnsimple.NewRecord(ctx, "foobar", &dnsimple.RecordArgs{
// 			Domain: pulumi.Any(_var.Dnsimple_domain),
// 			Name:   pulumi.String(""),
// 			Ttl:    pulumi.Float64(3600),
// 			Type:   pulumi.String("A"),
// 			Value:  pulumi.String("192.168.0.11"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-dnsimple/sdk/v2/go/dnsimple"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := dnsimple.NewRecord(ctx, "foobar", &dnsimple.RecordArgs{
// 			Domain: pulumi.Any(_var.Dnsimple_domain),
// 			Name:   pulumi.String("terraform"),
// 			Ttl:    pulumi.Float64(3600),
// 			Type:   pulumi.String("A"),
// 			Value:  pulumi.String("192.168.0.11"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type Record struct {
	pulumi.CustomResourceState

	// The domain to add the record to
	Domain pulumi.StringOutput `pulumi:"domain"`
	// The domain ID of the record
	DomainId pulumi.StringOutput `pulumi:"domainId"`
	// The FQDN of the record
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	// The name of the record
	Name pulumi.StringOutput `pulumi:"name"`
	// The priority of the record - only useful for some record types
	Priority pulumi.Float64Output `pulumi:"priority"`
	// The TTL of the record
	Ttl pulumi.Float64PtrOutput `pulumi:"ttl"`
	// The type of the record
	Type pulumi.StringOutput `pulumi:"type"`
	// The value of the record
	Value pulumi.StringOutput `pulumi:"value"`
}

// NewRecord registers a new resource with the given unique name, arguments, and options.
func NewRecord(ctx *pulumi.Context,
	name string, args *RecordArgs, opts ...pulumi.ResourceOption) (*Record, error) {
	if args == nil || args.Domain == nil {
		return nil, errors.New("missing required argument 'Domain'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	if args == nil || args.Value == nil {
		return nil, errors.New("missing required argument 'Value'")
	}
	if args == nil {
		args = &RecordArgs{}
	}
	var resource Record
	err := ctx.RegisterResource("dnsimple:index/record:Record", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRecord gets an existing Record resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRecord(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RecordState, opts ...pulumi.ResourceOption) (*Record, error) {
	var resource Record
	err := ctx.ReadResource("dnsimple:index/record:Record", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Record resources.
type recordState struct {
	// The domain to add the record to
	Domain *string `pulumi:"domain"`
	// The domain ID of the record
	DomainId *string `pulumi:"domainId"`
	// The FQDN of the record
	Hostname *string `pulumi:"hostname"`
	// The name of the record
	Name *string `pulumi:"name"`
	// The priority of the record - only useful for some record types
	Priority *float64 `pulumi:"priority"`
	// The TTL of the record
	Ttl *float64 `pulumi:"ttl"`
	// The type of the record
	Type *string `pulumi:"type"`
	// The value of the record
	Value *string `pulumi:"value"`
}

type RecordState struct {
	// The domain to add the record to
	Domain pulumi.StringPtrInput
	// The domain ID of the record
	DomainId pulumi.StringPtrInput
	// The FQDN of the record
	Hostname pulumi.StringPtrInput
	// The name of the record
	Name pulumi.StringPtrInput
	// The priority of the record - only useful for some record types
	Priority pulumi.Float64PtrInput
	// The TTL of the record
	Ttl pulumi.Float64PtrInput
	// The type of the record
	Type pulumi.StringPtrInput
	// The value of the record
	Value pulumi.StringPtrInput
}

func (RecordState) ElementType() reflect.Type {
	return reflect.TypeOf((*recordState)(nil)).Elem()
}

type recordArgs struct {
	// The domain to add the record to
	Domain string `pulumi:"domain"`
	// The name of the record
	Name string `pulumi:"name"`
	// The priority of the record - only useful for some record types
	Priority *float64 `pulumi:"priority"`
	// The TTL of the record
	Ttl *float64 `pulumi:"ttl"`
	// The type of the record
	Type string `pulumi:"type"`
	// The value of the record
	Value string `pulumi:"value"`
}

// The set of arguments for constructing a Record resource.
type RecordArgs struct {
	// The domain to add the record to
	Domain pulumi.StringInput
	// The name of the record
	Name pulumi.StringInput
	// The priority of the record - only useful for some record types
	Priority pulumi.Float64PtrInput
	// The TTL of the record
	Ttl pulumi.Float64PtrInput
	// The type of the record
	Type pulumi.StringInput
	// The value of the record
	Value pulumi.StringInput
}

func (RecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*recordArgs)(nil)).Elem()
}
