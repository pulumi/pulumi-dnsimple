{
    "name": "dnsimple",
    "description": "A Pulumi package for creating and managing dnsimple cloud resources.",
    "keywords": [
        "pulumi",
        "dnsimple"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`dnsimple` Terraform Provider](https://github.com/terraform-providers/terraform-provider-dnsimple).",
    "repository": "https://github.com/pulumi/pulumi-dnsimple",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "namespaces": {
                "dnsimple": "DNSimple"
            },
            "compatibility": "tfbridge20"
        },
        "go": {
            "importBasePath": "github.com/pulumi/pulumi-dnsimple/sdk/v3/go/dnsimple",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageDescription": "A Pulumi package for creating and managing dnsimple cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/terraform-providers/terraform-provider-dnsimple)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-dnsimple` repo](https://github.com/pulumi/pulumi-dnsimple/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-dnsimple` repo](https://github.com/terraform-providers/terraform-provider-dnsimple/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/terraform-providers/terraform-provider-dnsimple)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-dnsimple` repo](https://github.com/pulumi/pulumi-dnsimple/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-dnsimple` repo](https://github.com/terraform-providers/terraform-provider-dnsimple/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {
                "enabled": true
            }
        }
    },
    "config": {
        "variables": {
            "account": {
                "type": "string",
                "description": "The account for API operations.\n"
            },
            "prefetch": {
                "type": "boolean",
                "description": "Flag to enable the prefetch of zone records.\n"
            },
            "sandbox": {
                "type": "boolean",
                "description": "Flag to enable the sandbox API.\n"
            },
            "token": {
                "type": "string",
                "description": "The API v2 token for API operations.\n",
                "secret": true
            },
            "userAgent": {
                "type": "string",
                "description": "Custom string to append to the user agent used for sending HTTP requests to the API.\n"
            }
        },
        "defaults": [
            "account",
            "token"
        ]
    },
    "provider": {
        "description": "The provider type for the dnsimple package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "account": {
                "type": "string",
                "description": "The account for API operations.\n"
            },
            "prefetch": {
                "type": "boolean",
                "description": "Flag to enable the prefetch of zone records.\n"
            },
            "sandbox": {
                "type": "boolean",
                "description": "Flag to enable the sandbox API.\n"
            },
            "token": {
                "type": "string",
                "description": "The API v2 token for API operations.\n",
                "secret": true
            },
            "userAgent": {
                "type": "string",
                "description": "Custom string to append to the user agent used for sending HTTP requests to the API.\n"
            }
        },
        "required": [
            "account",
            "token"
        ],
        "inputProperties": {
            "account": {
                "type": "string",
                "description": "The account for API operations.\n"
            },
            "prefetch": {
                "type": "boolean",
                "description": "Flag to enable the prefetch of zone records.\n"
            },
            "sandbox": {
                "type": "boolean",
                "description": "Flag to enable the sandbox API.\n"
            },
            "token": {
                "type": "string",
                "description": "The API v2 token for API operations.\n",
                "secret": true
            },
            "userAgent": {
                "type": "string",
                "description": "Custom string to append to the user agent used for sending HTTP requests to the API.\n"
            }
        },
        "requiredInputs": [
            "account",
            "token"
        ]
    },
    "resources": {
        "dnsimple:index/domain:Domain": {
            "description": "Provides a DNSimple domain resource.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dnsimple from \"@pulumi/dnsimple\";\n\n// Create a domain\nconst foobar = new dnsimple.Domain(\"foobar\", {name: _var.dnsimple.domain});\n```\n```python\nimport pulumi\nimport pulumi_dnsimple as dnsimple\n\n# Create a domain\nfoobar = dnsimple.Domain(\"foobar\", name=var[\"dnsimple\"][\"domain\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DNSimple = Pulumi.DNSimple;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a domain\n    var foobar = new DNSimple.Domain(\"foobar\", new()\n    {\n        Name = @var.Dnsimple.Domain,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dnsimple/sdk/v3/go/dnsimple\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a domain\n\t\t_, err := dnsimple.NewDomain(ctx, \"foobar\", \u0026dnsimple.DomainArgs{\n\t\t\tName: pulumi.Any(_var.Dnsimple.Domain),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dnsimple.Domain;\nimport com.pulumi.dnsimple.DomainArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a domain\n        var foobar = new Domain(\"foobar\", DomainArgs.builder()        \n            .name(var_.dnsimple().domain())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a domain\n  foobar:\n    type: dnsimple:Domain\n    properties:\n      name: ${var.dnsimple.domain}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nDNSimple domains can be imported using their numeric record ID.\n\n```sh\n$ pulumi import dnsimple:index/domain:Domain resource_name 5678\n```\n\nThe record ID can be found within [DNSimple Domains API](https://developer.dnsimple.com/v2/domains/#listDomains). Check out [Authentication](https://developer.dnsimple.com/v2/#authentication) in API Overview for available options.\n\n$ curl -u 'EMAIL:PASSWORD' https://api.dnsimple.com/v2/1234/domains?name_like=example.com | jq\n\n{\n\n  \"data\": [\n\n    {\n\n      \"id\": 5678,\n\n      \"account_id\": 1234,\n\n      \"registrant_id\": null,\n\n      \"name\": \"example.com\",\n\n      \"unicode_name\": \"example.com\",\n\n      \"state\": \"hosted\",\n\n      \"auto_renew\": false,\n\n      \"private_whois\": false,\n\n      \"expires_on\": null,\n\n      \"expires_at\": null,\n\n      \"created_at\": \"2021-10-01T00:00:00Z\",\n\n      \"updated_at\": \"2021-10-01T00:00:00Z\"\n\n    }\n\n  ],\n\n  \"pagination\": {\n\n    \"current_page\": 1,\n\n    \"per_page\": 30,\n\n    \"total_entries\": 1,\n\n    \"total_pages\": 1\n\n  }\n\n}\n\n",
            "properties": {
                "accountId": {
                    "type": "integer"
                },
                "autoRenew": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "The domain name to be created\n"
                },
                "privateWhois": {
                    "type": "boolean"
                },
                "registrantId": {
                    "type": "integer"
                },
                "state": {
                    "type": "string"
                },
                "unicodeName": {
                    "type": "string"
                }
            },
            "required": [
                "accountId",
                "autoRenew",
                "name",
                "privateWhois",
                "registrantId",
                "state",
                "unicodeName"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The domain name to be created\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Domain resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer"
                    },
                    "autoRenew": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "The domain name to be created\n",
                        "willReplaceOnChanges": true
                    },
                    "privateWhois": {
                        "type": "boolean"
                    },
                    "registrantId": {
                        "type": "integer"
                    },
                    "state": {
                        "type": "string"
                    },
                    "unicodeName": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "dnsimple:index/emailForward:EmailForward": {
            "description": "Provides a DNSimple email forward resource.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dnsimple from \"@pulumi/dnsimple\";\n\n// Add an email forwarding rule to the domain\nconst foobar = new dnsimple.EmailForward(\"foobar\", {\n    aliasName: \"sales\",\n    destinationEmail: \"jane.doe@example.com\",\n    domain: _var.dnsimple_domain,\n});\n```\n```python\nimport pulumi\nimport pulumi_dnsimple as dnsimple\n\n# Add an email forwarding rule to the domain\nfoobar = dnsimple.EmailForward(\"foobar\",\n    alias_name=\"sales\",\n    destination_email=\"jane.doe@example.com\",\n    domain=var[\"dnsimple_domain\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DNSimple = Pulumi.DNSimple;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Add an email forwarding rule to the domain\n    var foobar = new DNSimple.EmailForward(\"foobar\", new()\n    {\n        AliasName = \"sales\",\n        DestinationEmail = \"jane.doe@example.com\",\n        Domain = @var.Dnsimple_domain,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dnsimple/sdk/v3/go/dnsimple\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Add an email forwarding rule to the domain\n\t\t_, err := dnsimple.NewEmailForward(ctx, \"foobar\", \u0026dnsimple.EmailForwardArgs{\n\t\t\tAliasName:        pulumi.String(\"sales\"),\n\t\t\tDestinationEmail: pulumi.String(\"jane.doe@example.com\"),\n\t\t\tDomain:           pulumi.Any(_var.Dnsimple_domain),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dnsimple.EmailForward;\nimport com.pulumi.dnsimple.EmailForwardArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Add an email forwarding rule to the domain\n        var foobar = new EmailForward(\"foobar\", EmailForwardArgs.builder()        \n            .aliasName(\"sales\")\n            .destinationEmail(\"jane.doe@example.com\")\n            .domain(var_.dnsimple_domain())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Add an email forwarding rule to the domain\n  foobar:\n    type: dnsimple:EmailForward\n    properties:\n      aliasName: sales\n      destinationEmail: jane.doe@example.com\n      domain: ${var.dnsimple_domain}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "aliasEmail": {
                    "type": "string",
                    "description": "The source email address on the domain\n"
                },
                "aliasName": {
                    "type": "string",
                    "description": "The name part (the part before the @) of the source email address on the domain\n"
                },
                "destinationEmail": {
                    "type": "string",
                    "description": "The destination email address on another domain\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The domain to add the email forwarding rule to\n"
                }
            },
            "required": [
                "aliasEmail",
                "aliasName",
                "destinationEmail",
                "domain"
            ],
            "inputProperties": {
                "aliasName": {
                    "type": "string",
                    "description": "The name part (the part before the @) of the source email address on the domain\n"
                },
                "destinationEmail": {
                    "type": "string",
                    "description": "The destination email address on another domain\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The domain to add the email forwarding rule to\n"
                }
            },
            "requiredInputs": [
                "aliasName",
                "destinationEmail",
                "domain"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EmailForward resources.\n",
                "properties": {
                    "aliasEmail": {
                        "type": "string",
                        "description": "The source email address on the domain\n"
                    },
                    "aliasName": {
                        "type": "string",
                        "description": "The name part (the part before the @) of the source email address on the domain\n"
                    },
                    "destinationEmail": {
                        "type": "string",
                        "description": "The destination email address on another domain\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "The domain to add the email forwarding rule to\n"
                    }
                },
                "type": "object"
            }
        },
        "dnsimple:index/letsEncryptCertificate:LetsEncryptCertificate": {
            "description": "Provides a DNSimple Let's Encrypt certificate resource.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dnsimple from \"@pulumi/dnsimple\";\n\nconst foobar = new dnsimple.LetsEncryptCertificate(\"foobar\", {\n    domainId: _var.dnsimple.domain_id,\n    autoRenew: false,\n    name: \"www\",\n});\n```\n```python\nimport pulumi\nimport pulumi_dnsimple as dnsimple\n\nfoobar = dnsimple.LetsEncryptCertificate(\"foobar\",\n    domain_id=var[\"dnsimple\"][\"domain_id\"],\n    auto_renew=False,\n    name=\"www\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DNSimple = Pulumi.DNSimple;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foobar = new DNSimple.LetsEncryptCertificate(\"foobar\", new()\n    {\n        DomainId = @var.Dnsimple.Domain_id,\n        AutoRenew = false,\n        Name = \"www\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dnsimple/sdk/v3/go/dnsimple\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dnsimple.NewLetsEncryptCertificate(ctx, \"foobar\", \u0026dnsimple.LetsEncryptCertificateArgs{\n\t\t\tDomainId:  pulumi.Any(_var.Dnsimple.Domain_id),\n\t\t\tAutoRenew: pulumi.Bool(false),\n\t\t\tName:      pulumi.String(\"www\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dnsimple.LetsEncryptCertificate;\nimport com.pulumi.dnsimple.LetsEncryptCertificateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foobar = new LetsEncryptCertificate(\"foobar\", LetsEncryptCertificateArgs.builder()        \n            .domainId(var_.dnsimple().domain_id())\n            .autoRenew(false)\n            .name(\"www\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foobar:\n    type: dnsimple:LetsEncryptCertificate\n    properties:\n      domainId: ${var.dnsimple.domain_id}\n      autoRenew: false\n      name: www\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "authorityIdentifier": {
                    "type": "string",
                    "description": "The identifying certification authority (CA)\n"
                },
                "autoRenew": {
                    "type": "boolean",
                    "description": "Set to true if the certificate will auto-renew\n"
                },
                "contactId": {
                    "type": "integer",
                    "description": "The contact id for the certificate\n",
                    "deprecationMessage": "contact_id is deprecated and has no effect. The attribute will be removed in the next major version."
                },
                "createdAt": {
                    "type": "string"
                },
                "csr": {
                    "type": "string",
                    "description": "The certificate signing request\n"
                },
                "domainId": {
                    "type": "string",
                    "description": "The domain to be issued the certificate for\n"
                },
                "expiresOn": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The certificate name\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the certificate\n"
                },
                "updatedAt": {
                    "type": "string"
                },
                "years": {
                    "type": "integer",
                    "description": "The years the certificate will last\n"
                }
            },
            "required": [
                "authorityIdentifier",
                "autoRenew",
                "createdAt",
                "csr",
                "expiresOn",
                "name",
                "state",
                "updatedAt",
                "years"
            ],
            "inputProperties": {
                "autoRenew": {
                    "type": "boolean",
                    "description": "Set to true if the certificate will auto-renew\n"
                },
                "contactId": {
                    "type": "integer",
                    "description": "The contact id for the certificate\n",
                    "deprecationMessage": "contact_id is deprecated and has no effect. The attribute will be removed in the next major version."
                },
                "domainId": {
                    "type": "string",
                    "description": "The domain to be issued the certificate for\n"
                },
                "name": {
                    "type": "string",
                    "description": "The certificate name\n"
                }
            },
            "requiredInputs": [
                "autoRenew",
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LetsEncryptCertificate resources.\n",
                "properties": {
                    "authorityIdentifier": {
                        "type": "string",
                        "description": "The identifying certification authority (CA)\n"
                    },
                    "autoRenew": {
                        "type": "boolean",
                        "description": "Set to true if the certificate will auto-renew\n"
                    },
                    "contactId": {
                        "type": "integer",
                        "description": "The contact id for the certificate\n",
                        "deprecationMessage": "contact_id is deprecated and has no effect. The attribute will be removed in the next major version."
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "csr": {
                        "type": "string",
                        "description": "The certificate signing request\n"
                    },
                    "domainId": {
                        "type": "string",
                        "description": "The domain to be issued the certificate for\n"
                    },
                    "expiresOn": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The certificate name\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state of the certificate\n"
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "years": {
                        "type": "integer",
                        "description": "The years the certificate will last\n"
                    }
                },
                "type": "object"
            }
        },
        "dnsimple:index/record:Record": {
            "properties": {
                "domain": {
                    "type": "string"
                },
                "domainId": {
                    "type": "string"
                },
                "hostname": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "priority": {
                    "type": "string"
                },
                "ttl": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "$ref": "#/types/dnsimple:index:RecordType"
                },
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "domain",
                "domainId",
                "hostname",
                "name",
                "priority",
                "type",
                "value"
            ],
            "inputProperties": {
                "domain": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string"
                },
                "priority": {
                    "type": "string"
                },
                "ttl": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "$ref": "#/types/dnsimple:index:RecordType",
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "domain",
                "name",
                "type",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Record resources.\n",
                "properties": {
                    "domain": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "domainId": {
                        "type": "string"
                    },
                    "hostname": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "priority": {
                        "type": "string"
                    },
                    "ttl": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "$ref": "#/types/dnsimple:index:RecordType",
                        "willReplaceOnChanges": true
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "This resource is deprecated.\nIt will be removed in the next major version."
        },
        "dnsimple:index/zoneRecord:ZoneRecord": {
            "description": "Provides a DNSimple zone record resource.\n\n## Deprecation warning\n\nYou can still use the _deprecated_ `dnsimple.Record` configuration, but be aware that it will be removed in the\nupcoming 1.0.0 release.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dnsimple from \"@pulumi/dnsimple\";\n\n// Add a record to the root domain\nconst foobar = new dnsimple.ZoneRecord(\"foobar\", {\n    name: \"\",\n    ttl: \"3600\",\n    type: \"A\",\n    value: \"192.168.0.11\",\n    zoneName: _var.dnsimple_domain,\n});\n```\n```python\nimport pulumi\nimport pulumi_dnsimple as dnsimple\n\n# Add a record to the root domain\nfoobar = dnsimple.ZoneRecord(\"foobar\",\n    name=\"\",\n    ttl=\"3600\",\n    type=\"A\",\n    value=\"192.168.0.11\",\n    zone_name=var[\"dnsimple_domain\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DNSimple = Pulumi.DNSimple;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Add a record to the root domain\n    var foobar = new DNSimple.ZoneRecord(\"foobar\", new()\n    {\n        Name = \"\",\n        Ttl = \"3600\",\n        Type = \"A\",\n        Value = \"192.168.0.11\",\n        ZoneName = @var.Dnsimple_domain,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dnsimple/sdk/v3/go/dnsimple\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Add a record to the root domain\n\t\t_, err := dnsimple.NewZoneRecord(ctx, \"foobar\", \u0026dnsimple.ZoneRecordArgs{\n\t\t\tName:     pulumi.String(\"\"),\n\t\t\tTtl:      pulumi.String(\"3600\"),\n\t\t\tType:     pulumi.String(\"A\"),\n\t\t\tValue:    pulumi.String(\"192.168.0.11\"),\n\t\t\tZoneName: pulumi.Any(_var.Dnsimple_domain),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dnsimple.ZoneRecord;\nimport com.pulumi.dnsimple.ZoneRecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Add a record to the root domain\n        var foobar = new ZoneRecord(\"foobar\", ZoneRecordArgs.builder()        \n            .name(\"\")\n            .ttl(3600)\n            .type(\"A\")\n            .value(\"192.168.0.11\")\n            .zoneName(var_.dnsimple_domain())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Add a record to the root domain\n  foobar:\n    type: dnsimple:ZoneRecord\n    properties:\n      name:\n      ttl: 3600\n      type: A\n      value: 192.168.0.11\n      zoneName: ${var.dnsimple_domain}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dnsimple from \"@pulumi/dnsimple\";\n\n// Add a record to a sub-domain\nconst foobar = new dnsimple.ZoneRecord(\"foobar\", {\n    name: \"terraform\",\n    ttl: \"3600\",\n    type: \"A\",\n    value: \"192.168.0.11\",\n    zoneName: _var.dnsimple_domain,\n});\n```\n```python\nimport pulumi\nimport pulumi_dnsimple as dnsimple\n\n# Add a record to a sub-domain\nfoobar = dnsimple.ZoneRecord(\"foobar\",\n    name=\"terraform\",\n    ttl=\"3600\",\n    type=\"A\",\n    value=\"192.168.0.11\",\n    zone_name=var[\"dnsimple_domain\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DNSimple = Pulumi.DNSimple;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Add a record to a sub-domain\n    var foobar = new DNSimple.ZoneRecord(\"foobar\", new()\n    {\n        Name = \"terraform\",\n        Ttl = \"3600\",\n        Type = \"A\",\n        Value = \"192.168.0.11\",\n        ZoneName = @var.Dnsimple_domain,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dnsimple/sdk/v3/go/dnsimple\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Add a record to a sub-domain\n\t\t_, err := dnsimple.NewZoneRecord(ctx, \"foobar\", \u0026dnsimple.ZoneRecordArgs{\n\t\t\tName:     pulumi.String(\"terraform\"),\n\t\t\tTtl:      pulumi.String(\"3600\"),\n\t\t\tType:     pulumi.String(\"A\"),\n\t\t\tValue:    pulumi.String(\"192.168.0.11\"),\n\t\t\tZoneName: pulumi.Any(_var.Dnsimple_domain),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dnsimple.ZoneRecord;\nimport com.pulumi.dnsimple.ZoneRecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Add a record to a sub-domain\n        var foobar = new ZoneRecord(\"foobar\", ZoneRecordArgs.builder()        \n            .name(\"terraform\")\n            .ttl(3600)\n            .type(\"A\")\n            .value(\"192.168.0.11\")\n            .zoneName(var_.dnsimple_domain())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Add a record to a sub-domain\n  foobar:\n    type: dnsimple:ZoneRecord\n    properties:\n      name: terraform\n      ttl: 3600\n      type: A\n      value: 192.168.0.11\n      zoneName: ${var.dnsimple_domain}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nDNSimple resources can be imported using their parent zone name (domain name) and numeric record ID.\n\n__Importing record example.com with record ID 1234__\n\n```sh\n$ pulumi import dnsimple:index/zoneRecord:ZoneRecord resource_name example.com_1234\n```\n__Importing record www.example.com with record ID 1234__\n\n```sh\n$ pulumi import dnsimple:index/zoneRecord:ZoneRecord resource_name example.com_1234\n```\nThe record ID can be found in the URL when editing a record on the DNSimple web dashboard.\n\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the record\n"
                },
                "priority": {
                    "type": "string",
                    "description": "The priority of the record - only useful for some record types\n"
                },
                "qualifiedName": {
                    "type": "string",
                    "description": "The FQDN of the record\n"
                },
                "ttl": {
                    "type": "string",
                    "description": "The TTL of the record\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the record\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the record\n"
                },
                "zoneId": {
                    "type": "string",
                    "description": "The domain ID of the record\n"
                },
                "zoneName": {
                    "type": "string",
                    "description": "The domain to add the record to\n"
                }
            },
            "required": [
                "name",
                "priority",
                "qualifiedName",
                "type",
                "value",
                "zoneId",
                "zoneName"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the record\n"
                },
                "priority": {
                    "type": "string",
                    "description": "The priority of the record - only useful for some record types\n"
                },
                "ttl": {
                    "type": "string",
                    "description": "The TTL of the record\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the record\n",
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "string",
                    "description": "The value of the record\n"
                },
                "zoneName": {
                    "type": "string",
                    "description": "The domain to add the record to\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "name",
                "type",
                "value",
                "zoneName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ZoneRecord resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the record\n"
                    },
                    "priority": {
                        "type": "string",
                        "description": "The priority of the record - only useful for some record types\n"
                    },
                    "qualifiedName": {
                        "type": "string",
                        "description": "The FQDN of the record\n"
                    },
                    "ttl": {
                        "type": "string",
                        "description": "The TTL of the record\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the record\n",
                        "willReplaceOnChanges": true
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the record\n"
                    },
                    "zoneId": {
                        "type": "string",
                        "description": "The domain ID of the record\n"
                    },
                    "zoneName": {
                        "type": "string",
                        "description": "The domain to add the record to\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "dnsimple:index/getCertificate:getCertificate": {
            "description": "Provides a DNSimple certificate data source.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dnsimple from \"@pulumi/dnsimple\";\n\nconst foobar = dnsimple.getCertificate({\n    certificateId: _var.dnsimple_certificate_id,\n    domain: _var.dnsimple_domain,\n});\n```\n```python\nimport pulumi\nimport pulumi_dnsimple as dnsimple\n\nfoobar = dnsimple.get_certificate(certificate_id=var[\"dnsimple_certificate_id\"],\n    domain=var[\"dnsimple_domain\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DNSimple = Pulumi.DNSimple;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foobar = DNSimple.GetCertificate.Invoke(new()\n    {\n        CertificateId = @var.Dnsimple_certificate_id,\n        Domain = @var.Dnsimple_domain,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dnsimple/sdk/v3/go/dnsimple\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dnsimple.GetCertificate(ctx, \u0026dnsimple.GetCertificateArgs{\n\t\t\tCertificateId: _var.Dnsimple_certificate_id,\n\t\t\tDomain:        _var.Dnsimple_domain,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dnsimple.DnsimpleFunctions;\nimport com.pulumi.dnsimple.inputs.GetCertificateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foobar = DnsimpleFunctions.getCertificate(GetCertificateArgs.builder()\n            .certificateId(var_.dnsimple_certificate_id())\n            .domain(var_.dnsimple_domain())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foobar:\n    fn::invoke:\n      Function: dnsimple:getCertificate\n      Arguments:\n        certificateId: ${var.dnsimple_certificate_id}\n        domain: ${var.dnsimple_domain}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCertificate.\n",
                "properties": {
                    "certificateId": {
                        "type": "string",
                        "description": "The ID of the SSL Certificate\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "The domain of the SSL Certificate\n"
                    }
                },
                "type": "object",
                "required": [
                    "certificateId",
                    "domain"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCertificate.\n",
                "properties": {
                    "certificateChains": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of certificates that make up the chain\n"
                    },
                    "certificateId": {
                        "type": "string"
                    },
                    "domain": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "privateKey": {
                        "type": "string",
                        "description": "The corresponding Private Key for the SSL Certificate\n"
                    },
                    "rootCertificate": {
                        "type": "string",
                        "description": "The Root Certificate of the issuing CA\n"
                    },
                    "serverCertificate": {
                        "type": "string",
                        "description": "The SSL Certificate\n"
                    }
                },
                "type": "object",
                "required": [
                    "certificateChains",
                    "certificateId",
                    "domain",
                    "privateKey",
                    "rootCertificate",
                    "serverCertificate",
                    "id"
                ]
            }
        },
        "dnsimple:index/getZone:getZone": {
            "description": "Get information about a DNSimple zone.\n\nGet zone:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dnsimple from \"@pulumi/dnsimple\";\n\nconst foobar = dnsimple.getZone({\n    name: \"dnsimple.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_dnsimple as dnsimple\n\nfoobar = dnsimple.get_zone(name=\"dnsimple.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing DNSimple = Pulumi.DNSimple;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foobar = DNSimple.GetZone.Invoke(new()\n    {\n        Name = \"dnsimple.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-dnsimple/sdk/v3/go/dnsimple\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dnsimple.GetZone(ctx, \u0026dnsimple.GetZoneArgs{\n\t\t\tName: \"dnsimple.com\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dnsimple.DnsimpleFunctions;\nimport com.pulumi.dnsimple.inputs.GetZoneArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foobar = DnsimpleFunctions.getZone(GetZoneArgs.builder()\n            .name(\"dnsimple.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foobar:\n    fn::invoke:\n      Function: dnsimple:getZone\n      Arguments:\n        name: dnsimple.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nThe following arguments are supported:\n\n* `name` - (Required) The name of the zone\n\nThe following attributes are exported:\n\n* `id` - The zone ID\n* `account_id` - The account ID\n* `name` - The name of the zone\n* `reverse` - True for a reverse zone, false for a forward zone.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getZone.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getZone.\n",
                "properties": {
                    "accountId": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "reverse": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "id",
                    "name",
                    "reverse"
                ]
            }
        }
    }
}